// THIS FILE IS GENERATED BY CODE GENERATOR. DO NOT CHANGE MANUALLY.

export const data = {
	"1002": {
		"category": "Error",
		"code": 1002,
		"message": "Unterminated string literal."
	},
	"1003": {
		"category": "Error",
		"code": 1003,
		"message": "Identifier expected."
	},
	"1005": {
		"category": "Error",
		"code": 1005,
		"message": "'{0}' expected."
	},
	"1006": {
		"category": "Error",
		"code": 1006,
		"message": "A file cannot have a reference to itself."
	},
	"1007": {
		"category": "Error",
		"code": 1007,
		"message": "The parser expected to find a '}' to match the '{' token here."
	},
	"1009": {
		"category": "Error",
		"code": 1009,
		"message": "Trailing comma not allowed."
	},
	"1010": {
		"category": "Error",
		"code": 1010,
		"message": "'*/' expected."
	},
	"1011": {
		"category": "Error",
		"code": 1011,
		"message": "An element access expression should take an argument."
	},
	"1012": {
		"category": "Error",
		"code": 1012,
		"message": "Unexpected token."
	},
	"1013": {
		"category": "Error",
		"code": 1013,
		"message": "A rest parameter or binding pattern may not have a trailing comma."
	},
	"1014": {
		"category": "Error",
		"code": 1014,
		"message": "A rest parameter must be last in a parameter list."
	},
	"1015": {
		"category": "Error",
		"code": 1015,
		"message": "Parameter cannot have question mark and initializer."
	},
	"1016": {
		"category": "Error",
		"code": 1016,
		"message": "A required parameter cannot follow an optional parameter."
	},
	"1017": {
		"category": "Error",
		"code": 1017,
		"message": "An index signature cannot have a rest parameter."
	},
	"1018": {
		"category": "Error",
		"code": 1018,
		"message": "An index signature parameter cannot have an accessibility modifier."
	},
	"1019": {
		"category": "Error",
		"code": 1019,
		"message": "An index signature parameter cannot have a question mark."
	},
	"1020": {
		"category": "Error",
		"code": 1020,
		"message": "An index signature parameter cannot have an initializer."
	},
	"1021": {
		"category": "Error",
		"code": 1021,
		"message": "An index signature must have a type annotation."
	},
	"1022": {
		"category": "Error",
		"code": 1022,
		"message": "An index signature parameter must have a type annotation."
	},
	"1023": {
		"category": "Error",
		"code": 1023,
		"message": "An index signature parameter type must be either 'string' or 'number'."
	},
	"1024": {
		"category": "Error",
		"code": 1024,
		"message": "'readonly' modifier can only appear on a property declaration or index signature."
	},
	"1028": {
		"category": "Error",
		"code": 1028,
		"message": "Accessibility modifier already seen."
	},
	"1029": {
		"category": "Error",
		"code": 1029,
		"message": "'{0}' modifier must precede '{1}' modifier."
	},
	"1030": {
		"category": "Error",
		"code": 1030,
		"message": "'{0}' modifier already seen."
	},
	"1031": {
		"category": "Error",
		"code": 1031,
		"message": "'{0}' modifier cannot appear on a class element."
	},
	"1034": {
		"category": "Error",
		"code": 1034,
		"message": "'super' must be followed by an argument list or member access."
	},
	"1035": {
		"category": "Error",
		"code": 1035,
		"message": "Only ambient modules can use quoted names."
	},
	"1036": {
		"category": "Error",
		"code": 1036,
		"message": "Statements are not allowed in ambient contexts."
	},
	"1038": {
		"category": "Error",
		"code": 1038,
		"message": "A 'declare' modifier cannot be used in an already ambient context."
	},
	"1039": {
		"category": "Error",
		"code": 1039,
		"message": "Initializers are not allowed in ambient contexts."
	},
	"1040": {
		"category": "Error",
		"code": 1040,
		"message": "'{0}' modifier cannot be used in an ambient context."
	},
	"1041": {
		"category": "Error",
		"code": 1041,
		"message": "'{0}' modifier cannot be used with a class declaration."
	},
	"1042": {
		"category": "Error",
		"code": 1042,
		"message": "'{0}' modifier cannot be used here."
	},
	"1043": {
		"category": "Error",
		"code": 1043,
		"message": "'{0}' modifier cannot appear on a data property."
	},
	"1044": {
		"category": "Error",
		"code": 1044,
		"message": "'{0}' modifier cannot appear on a module or namespace element."
	},
	"1045": {
		"category": "Error",
		"code": 1045,
		"message": "A '{0}' modifier cannot be used with an interface declaration."
	},
	"1046": {
		"category": "Error",
		"code": 1046,
		"message": "Top-level declarations in .d.ts files must start with either a 'declare' or 'export' modifier."
	},
	"1047": {
		"category": "Error",
		"code": 1047,
		"message": "A rest parameter cannot be optional."
	},
	"1048": {
		"category": "Error",
		"code": 1048,
		"message": "A rest parameter cannot have an initializer."
	},
	"1049": {
		"category": "Error",
		"code": 1049,
		"message": "A 'set' accessor must have exactly one parameter."
	},
	"1051": {
		"category": "Error",
		"code": 1051,
		"message": "A 'set' accessor cannot have an optional parameter."
	},
	"1052": {
		"category": "Error",
		"code": 1052,
		"message": "A 'set' accessor parameter cannot have an initializer."
	},
	"1053": {
		"category": "Error",
		"code": 1053,
		"message": "A 'set' accessor cannot have rest parameter."
	},
	"1054": {
		"category": "Error",
		"code": 1054,
		"message": "A 'get' accessor cannot have parameters."
	},
	"1055": {
		"category": "Error",
		"code": 1055,
		"message": "Type '{0}' is not a valid async function return type in ES5/ES3 because it does not refer to a Promise-compatible constructor value."
	},
	"1056": {
		"category": "Error",
		"code": 1056,
		"message": "Accessors are only available when targeting ECMAScript 5 and higher."
	},
	"1057": {
		"category": "Error",
		"code": 1057,
		"message": "An async function or method must have a valid awaitable return type."
	},
	"1058": {
		"category": "Error",
		"code": 1058,
		"message": "The return type of an async function must either be a valid promise or must not contain a callable 'then' member."
	},
	"1059": {
		"category": "Error",
		"code": 1059,
		"message": "A promise must have a 'then' method."
	},
	"1060": {
		"category": "Error",
		"code": 1060,
		"message": "The first parameter of the 'then' method of a promise must be a callback."
	},
	"1061": {
		"category": "Error",
		"code": 1061,
		"message": "Enum member must have initializer."
	},
	"1062": {
		"category": "Error",
		"code": 1062,
		"message": "Type is referenced directly or indirectly in the fulfillment callback of its own 'then' method."
	},
	"1063": {
		"category": "Error",
		"code": 1063,
		"message": "An export assignment cannot be used in a namespace."
	},
	"1064": {
		"category": "Error",
		"code": 1064,
		"message": "The return type of an async function or method must be the global Promise<T> type."
	},
	"1066": {
		"category": "Error",
		"code": 1066,
		"message": "In ambient enum declarations member initializer must be constant expression."
	},
	"1068": {
		"category": "Error",
		"code": 1068,
		"message": "Unexpected token. A constructor, method, accessor, or property was expected."
	},
	"1069": {
		"category": "Error",
		"code": 1069,
		"message": "Unexpected token. A type parameter name was expected without curly braces."
	},
	"1070": {
		"category": "Error",
		"code": 1070,
		"message": "'{0}' modifier cannot appear on a type member."
	},
	"1071": {
		"category": "Error",
		"code": 1071,
		"message": "'{0}' modifier cannot appear on an index signature."
	},
	"1079": {
		"category": "Error",
		"code": 1079,
		"message": "A '{0}' modifier cannot be used with an import declaration."
	},
	"1084": {
		"category": "Error",
		"code": 1084,
		"message": "Invalid 'reference' directive syntax."
	},
	"1085": {
		"category": "Error",
		"code": 1085,
		"message": "Octal literals are not available when targeting ECMAScript 5 and higher. Use the syntax '{0}'."
	},
	"1089": {
		"category": "Error",
		"code": 1089,
		"message": "'{0}' modifier cannot appear on a constructor declaration."
	},
	"1090": {
		"category": "Error",
		"code": 1090,
		"message": "'{0}' modifier cannot appear on a parameter."
	},
	"1091": {
		"category": "Error",
		"code": 1091,
		"message": "Only a single variable declaration is allowed in a 'for...in' statement."
	},
	"1092": {
		"category": "Error",
		"code": 1092,
		"message": "Type parameters cannot appear on a constructor declaration."
	},
	"1093": {
		"category": "Error",
		"code": 1093,
		"message": "Type annotation cannot appear on a constructor declaration."
	},
	"1094": {
		"category": "Error",
		"code": 1094,
		"message": "An accessor cannot have type parameters."
	},
	"1095": {
		"category": "Error",
		"code": 1095,
		"message": "A 'set' accessor cannot have a return type annotation."
	},
	"1096": {
		"category": "Error",
		"code": 1096,
		"message": "An index signature must have exactly one parameter."
	},
	"1097": {
		"category": "Error",
		"code": 1097,
		"message": "'{0}' list cannot be empty."
	},
	"1098": {
		"category": "Error",
		"code": 1098,
		"message": "Type parameter list cannot be empty."
	},
	"1099": {
		"category": "Error",
		"code": 1099,
		"message": "Type argument list cannot be empty."
	},
	"1100": {
		"category": "Error",
		"code": 1100,
		"message": "Invalid use of '{0}' in strict mode."
	},
	"1101": {
		"category": "Error",
		"code": 1101,
		"message": "'with' statements are not allowed in strict mode."
	},
	"1102": {
		"category": "Error",
		"code": 1102,
		"message": "'delete' cannot be called on an identifier in strict mode."
	},
	"1103": {
		"category": "Error",
		"code": 1103,
		"message": "A 'for-await-of' statement is only allowed within an async function or async generator."
	},
	"1104": {
		"category": "Error",
		"code": 1104,
		"message": "A 'continue' statement can only be used within an enclosing iteration statement."
	},
	"1105": {
		"category": "Error",
		"code": 1105,
		"message": "A 'break' statement can only be used within an enclosing iteration or switch statement."
	},
	"1107": {
		"category": "Error",
		"code": 1107,
		"message": "Jump target cannot cross function boundary."
	},
	"1108": {
		"category": "Error",
		"code": 1108,
		"message": "A 'return' statement can only be used within a function body."
	},
	"1109": {
		"category": "Error",
		"code": 1109,
		"message": "Expression expected."
	},
	"1110": {
		"category": "Error",
		"code": 1110,
		"message": "Type expected."
	},
	"1113": {
		"category": "Error",
		"code": 1113,
		"message": "A 'default' clause cannot appear more than once in a 'switch' statement."
	},
	"1114": {
		"category": "Error",
		"code": 1114,
		"message": "Duplicate label '{0}'."
	},
	"1115": {
		"category": "Error",
		"code": 1115,
		"message": "A 'continue' statement can only jump to a label of an enclosing iteration statement."
	},
	"1116": {
		"category": "Error",
		"code": 1116,
		"message": "A 'break' statement can only jump to a label of an enclosing statement."
	},
	"1117": {
		"category": "Error",
		"code": 1117,
		"message": "An object literal cannot have multiple properties with the same name in strict mode."
	},
	"1118": {
		"category": "Error",
		"code": 1118,
		"message": "An object literal cannot have multiple get/set accessors with the same name."
	},
	"1119": {
		"category": "Error",
		"code": 1119,
		"message": "An object literal cannot have property and accessor with the same name."
	},
	"1120": {
		"category": "Error",
		"code": 1120,
		"message": "An export assignment cannot have modifiers."
	},
	"1121": {
		"category": "Error",
		"code": 1121,
		"message": "Octal literals are not allowed in strict mode."
	},
	"1123": {
		"category": "Error",
		"code": 1123,
		"message": "Variable declaration list cannot be empty."
	},
	"1124": {
		"category": "Error",
		"code": 1124,
		"message": "Digit expected."
	},
	"1125": {
		"category": "Error",
		"code": 1125,
		"message": "Hexadecimal digit expected."
	},
	"1126": {
		"category": "Error",
		"code": 1126,
		"message": "Unexpected end of text."
	},
	"1127": {
		"category": "Error",
		"code": 1127,
		"message": "Invalid character."
	},
	"1128": {
		"category": "Error",
		"code": 1128,
		"message": "Declaration or statement expected."
	},
	"1129": {
		"category": "Error",
		"code": 1129,
		"message": "Statement expected."
	},
	"1130": {
		"category": "Error",
		"code": 1130,
		"message": "'case' or 'default' expected."
	},
	"1131": {
		"category": "Error",
		"code": 1131,
		"message": "Property or signature expected."
	},
	"1132": {
		"category": "Error",
		"code": 1132,
		"message": "Enum member expected."
	},
	"1134": {
		"category": "Error",
		"code": 1134,
		"message": "Variable declaration expected."
	},
	"1135": {
		"category": "Error",
		"code": 1135,
		"message": "Argument expression expected."
	},
	"1136": {
		"category": "Error",
		"code": 1136,
		"message": "Property assignment expected."
	},
	"1137": {
		"category": "Error",
		"code": 1137,
		"message": "Expression or comma expected."
	},
	"1138": {
		"category": "Error",
		"code": 1138,
		"message": "Parameter declaration expected."
	},
	"1139": {
		"category": "Error",
		"code": 1139,
		"message": "Type parameter declaration expected."
	},
	"1140": {
		"category": "Error",
		"code": 1140,
		"message": "Type argument expected."
	},
	"1141": {
		"category": "Error",
		"code": 1141,
		"message": "String literal expected."
	},
	"1142": {
		"category": "Error",
		"code": 1142,
		"message": "Line break not permitted here."
	},
	"1144": {
		"category": "Error",
		"code": 1144,
		"message": "'{' or ';' expected."
	},
	"1146": {
		"category": "Error",
		"code": 1146,
		"message": "Declaration expected."
	},
	"1147": {
		"category": "Error",
		"code": 1147,
		"message": "Import declarations in a namespace cannot reference a module."
	},
	"1148": {
		"category": "Error",
		"code": 1148,
		"message": "Cannot use imports, exports, or module augmentations when '--module' is 'none'."
	},
	"1149": {
		"category": "Error",
		"code": 1149,
		"message": "File name '{0}' differs from already included file name '{1}' only in casing."
	},
	"1155": {
		"category": "Error",
		"code": 1155,
		"message": "'const' declarations must be initialized."
	},
	"1156": {
		"category": "Error",
		"code": 1156,
		"message": "'const' declarations can only be declared inside a block."
	},
	"1157": {
		"category": "Error",
		"code": 1157,
		"message": "'let' declarations can only be declared inside a block."
	},
	"1160": {
		"category": "Error",
		"code": 1160,
		"message": "Unterminated template literal."
	},
	"1161": {
		"category": "Error",
		"code": 1161,
		"message": "Unterminated regular expression literal."
	},
	"1162": {
		"category": "Error",
		"code": 1162,
		"message": "An object member cannot be declared optional."
	},
	"1163": {
		"category": "Error",
		"code": 1163,
		"message": "A 'yield' expression is only allowed in a generator body."
	},
	"1164": {
		"category": "Error",
		"code": 1164,
		"message": "Computed property names are not allowed in enums."
	},
	"1165": {
		"category": "Error",
		"code": 1165,
		"message": "A computed property name in an ambient context must refer to an expression whose type is a literal type or a 'unique symbol' type."
	},
	"1166": {
		"category": "Error",
		"code": 1166,
		"message": "A computed property name in a class property declaration must refer to an expression whose type is a literal type or a 'unique symbol' type."
	},
	"1168": {
		"category": "Error",
		"code": 1168,
		"message": "A computed property name in a method overload must refer to an expression whose type is a literal type or a 'unique symbol' type."
	},
	"1169": {
		"category": "Error",
		"code": 1169,
		"message": "A computed property name in an interface must refer to an expression whose type is a literal type or a 'unique symbol' type."
	},
	"1170": {
		"category": "Error",
		"code": 1170,
		"message": "A computed property name in a type literal must refer to an expression whose type is a literal type or a 'unique symbol' type."
	},
	"1171": {
		"category": "Error",
		"code": 1171,
		"message": "A comma expression is not allowed in a computed property name."
	},
	"1172": {
		"category": "Error",
		"code": 1172,
		"message": "'extends' clause already seen."
	},
	"1173": {
		"category": "Error",
		"code": 1173,
		"message": "'extends' clause must precede 'implements' clause."
	},
	"1174": {
		"category": "Error",
		"code": 1174,
		"message": "Classes can only extend a single class."
	},
	"1175": {
		"category": "Error",
		"code": 1175,
		"message": "'implements' clause already seen."
	},
	"1176": {
		"category": "Error",
		"code": 1176,
		"message": "Interface declaration cannot have 'implements' clause."
	},
	"1177": {
		"category": "Error",
		"code": 1177,
		"message": "Binary digit expected."
	},
	"1178": {
		"category": "Error",
		"code": 1178,
		"message": "Octal digit expected."
	},
	"1179": {
		"category": "Error",
		"code": 1179,
		"message": "Unexpected token. '{' expected."
	},
	"1180": {
		"category": "Error",
		"code": 1180,
		"message": "Property destructuring pattern expected."
	},
	"1181": {
		"category": "Error",
		"code": 1181,
		"message": "Array element destructuring pattern expected."
	},
	"1182": {
		"category": "Error",
		"code": 1182,
		"message": "A destructuring declaration must have an initializer."
	},
	"1183": {
		"category": "Error",
		"code": 1183,
		"message": "An implementation cannot be declared in ambient contexts."
	},
	"1184": {
		"category": "Error",
		"code": 1184,
		"message": "Modifiers cannot appear here."
	},
	"1185": {
		"category": "Error",
		"code": 1185,
		"message": "Merge conflict marker encountered."
	},
	"1186": {
		"category": "Error",
		"code": 1186,
		"message": "A rest element cannot have an initializer."
	},
	"1187": {
		"category": "Error",
		"code": 1187,
		"message": "A parameter property may not be declared using a binding pattern."
	},
	"1188": {
		"category": "Error",
		"code": 1188,
		"message": "Only a single variable declaration is allowed in a 'for...of' statement."
	},
	"1189": {
		"category": "Error",
		"code": 1189,
		"message": "The variable declaration of a 'for...in' statement cannot have an initializer."
	},
	"1190": {
		"category": "Error",
		"code": 1190,
		"message": "The variable declaration of a 'for...of' statement cannot have an initializer."
	},
	"1191": {
		"category": "Error",
		"code": 1191,
		"message": "An import declaration cannot have modifiers."
	},
	"1192": {
		"category": "Error",
		"code": 1192,
		"message": "Module '{0}' has no default export."
	},
	"1193": {
		"category": "Error",
		"code": 1193,
		"message": "An export declaration cannot have modifiers."
	},
	"1194": {
		"category": "Error",
		"code": 1194,
		"message": "Export declarations are not permitted in a namespace."
	},
	"1196": {
		"category": "Error",
		"code": 1196,
		"message": "Catch clause variable cannot have a type annotation."
	},
	"1197": {
		"category": "Error",
		"code": 1197,
		"message": "Catch clause variable cannot have an initializer."
	},
	"1198": {
		"category": "Error",
		"code": 1198,
		"message": "An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive."
	},
	"1199": {
		"category": "Error",
		"code": 1199,
		"message": "Unterminated Unicode escape sequence."
	},
	"1200": {
		"category": "Error",
		"code": 1200,
		"message": "Line terminator not permitted before arrow."
	},
	"1202": {
		"category": "Error",
		"code": 1202,
		"message": "Import assignment cannot be used when targeting ECMAScript modules. Consider using 'import * as ns from \"mod\"', 'import {a} from \"mod\"', 'import d from \"mod\"', or another module format instead."
	},
	"1203": {
		"category": "Error",
		"code": 1203,
		"message": "Export assignment cannot be used when targeting ECMAScript modules. Consider using 'export default' or another module format instead."
	},
	"1205": {
		"category": "Error",
		"code": 1205,
		"message": "Re-exporting a type when the '--isolatedModules' flag is provided requires using 'export type'."
	},
	"1206": {
		"category": "Error",
		"code": 1206,
		"message": "Decorators are not valid here."
	},
	"1207": {
		"category": "Error",
		"code": 1207,
		"message": "Decorators cannot be applied to multiple get/set accessors of the same name."
	},
	"1208": {
		"category": "Error",
		"code": 1208,
		"message": "All files must be modules when the '--isolatedModules' flag is provided."
	},
	"1210": {
		"category": "Error",
		"code": 1210,
		"message": "Invalid use of '{0}'. Class definitions are automatically in strict mode."
	},
	"1211": {
		"category": "Error",
		"code": 1211,
		"message": "A class declaration without the 'default' modifier must have a name."
	},
	"1212": {
		"category": "Error",
		"code": 1212,
		"message": "Identifier expected. '{0}' is a reserved word in strict mode."
	},
	"1213": {
		"category": "Error",
		"code": 1213,
		"message": "Identifier expected. '{0}' is a reserved word in strict mode. Class definitions are automatically in strict mode."
	},
	"1214": {
		"category": "Error",
		"code": 1214,
		"message": "Identifier expected. '{0}' is a reserved word in strict mode. Modules are automatically in strict mode."
	},
	"1215": {
		"category": "Error",
		"code": 1215,
		"message": "Invalid use of '{0}'. Modules are automatically in strict mode."
	},
	"1216": {
		"category": "Error",
		"code": 1216,
		"message": "Identifier expected. '__esModule' is reserved as an exported marker when transforming ECMAScript modules."
	},
	"1218": {
		"category": "Error",
		"code": 1218,
		"message": "Export assignment is not supported when '--module' flag is 'system'."
	},
	"1219": {
		"category": "Error",
		"code": 1219,
		"message": "Experimental support for decorators is a feature that is subject to change in a future release. Set the 'experimentalDecorators' option in your 'tsconfig' or 'jsconfig' to remove this warning."
	},
	"1220": {
		"category": "Error",
		"code": 1220,
		"message": "Generators are only available when targeting ECMAScript 2015 or higher."
	},
	"1221": {
		"category": "Error",
		"code": 1221,
		"message": "Generators are not allowed in an ambient context."
	},
	"1222": {
		"category": "Error",
		"code": 1222,
		"message": "An overload signature cannot be declared as a generator."
	},
	"1223": {
		"category": "Error",
		"code": 1223,
		"message": "'{0}' tag already specified."
	},
	"1224": {
		"category": "Error",
		"code": 1224,
		"message": "Signature '{0}' must be a type predicate."
	},
	"1225": {
		"category": "Error",
		"code": 1225,
		"message": "Cannot find parameter '{0}'."
	},
	"1226": {
		"category": "Error",
		"code": 1226,
		"message": "Type predicate '{0}' is not assignable to '{1}'."
	},
	"1227": {
		"category": "Error",
		"code": 1227,
		"message": "Parameter '{0}' is not in the same position as parameter '{1}'."
	},
	"1228": {
		"category": "Error",
		"code": 1228,
		"message": "A type predicate is only allowed in return type position for functions and methods."
	},
	"1229": {
		"category": "Error",
		"code": 1229,
		"message": "A type predicate cannot reference a rest parameter."
	},
	"1230": {
		"category": "Error",
		"code": 1230,
		"message": "A type predicate cannot reference element '{0}' in a binding pattern."
	},
	"1231": {
		"category": "Error",
		"code": 1231,
		"message": "An export assignment can only be used in a module."
	},
	"1232": {
		"category": "Error",
		"code": 1232,
		"message": "An import declaration can only be used in a namespace or module."
	},
	"1233": {
		"category": "Error",
		"code": 1233,
		"message": "An export declaration can only be used in a module."
	},
	"1234": {
		"category": "Error",
		"code": 1234,
		"message": "An ambient module declaration is only allowed at the top level in a file."
	},
	"1235": {
		"category": "Error",
		"code": 1235,
		"message": "A namespace declaration is only allowed in a namespace or module."
	},
	"1236": {
		"category": "Error",
		"code": 1236,
		"message": "The return type of a property decorator function must be either 'void' or 'any'."
	},
	"1237": {
		"category": "Error",
		"code": 1237,
		"message": "The return type of a parameter decorator function must be either 'void' or 'any'."
	},
	"1238": {
		"category": "Error",
		"code": 1238,
		"message": "Unable to resolve signature of class decorator when called as an expression."
	},
	"1239": {
		"category": "Error",
		"code": 1239,
		"message": "Unable to resolve signature of parameter decorator when called as an expression."
	},
	"1240": {
		"category": "Error",
		"code": 1240,
		"message": "Unable to resolve signature of property decorator when called as an expression."
	},
	"1241": {
		"category": "Error",
		"code": 1241,
		"message": "Unable to resolve signature of method decorator when called as an expression."
	},
	"1242": {
		"category": "Error",
		"code": 1242,
		"message": "'abstract' modifier can only appear on a class, method, or property declaration."
	},
	"1243": {
		"category": "Error",
		"code": 1243,
		"message": "'{0}' modifier cannot be used with '{1}' modifier."
	},
	"1244": {
		"category": "Error",
		"code": 1244,
		"message": "Abstract methods can only appear within an abstract class."
	},
	"1245": {
		"category": "Error",
		"code": 1245,
		"message": "Method '{0}' cannot have an implementation because it is marked abstract."
	},
	"1246": {
		"category": "Error",
		"code": 1246,
		"message": "An interface property cannot have an initializer."
	},
	"1247": {
		"category": "Error",
		"code": 1247,
		"message": "A type literal property cannot have an initializer."
	},
	"1248": {
		"category": "Error",
		"code": 1248,
		"message": "A class member cannot have the '{0}' keyword."
	},
	"1249": {
		"category": "Error",
		"code": 1249,
		"message": "A decorator can only decorate a method implementation, not an overload."
	},
	"1250": {
		"category": "Error",
		"code": 1250,
		"message": "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'."
	},
	"1251": {
		"category": "Error",
		"code": 1251,
		"message": "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'. Class definitions are automatically in strict mode."
	},
	"1252": {
		"category": "Error",
		"code": 1252,
		"message": "Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'. Modules are automatically in strict mode."
	},
	"1253": {
		"category": "Error",
		"code": 1253,
		"message": "'{0}' tag cannot be used independently as a top level JSDoc tag."
	},
	"1254": {
		"category": "Error",
		"code": 1254,
		"message": "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference."
	},
	"1255": {
		"category": "Error",
		"code": 1255,
		"message": "A definite assignment assertion '!' is not permitted in this context."
	},
	"1256": {
		"category": "Error",
		"code": 1256,
		"message": "A rest element must be last in a tuple type."
	},
	"1257": {
		"category": "Error",
		"code": 1257,
		"message": "A required element cannot follow an optional element."
	},
	"1258": {
		"category": "Error",
		"code": 1258,
		"message": "Definite assignment assertions can only be used along with a type annotation."
	},
	"1259": {
		"category": "Error",
		"code": 1259,
		"message": "Module '{0}' can only be default-imported using the '{1}' flag"
	},
	"1260": {
		"category": "Error",
		"code": 1260,
		"message": "Keywords cannot contain escape characters."
	},
	"1261": {
		"category": "Error",
		"code": 1261,
		"message": "Already included file name '{0}' differs from file name '{1}' only in casing."
	},
	"1300": {
		"category": "Error",
		"code": 1300,
		"message": "'with' statements are not allowed in an async function block."
	},
	"1308": {
		"category": "Error",
		"code": 1308,
		"message": "'await' expressions are only allowed within async functions and at the top levels of modules."
	},
	"1312": {
		"category": "Error",
		"code": 1312,
		"message": "'=' can only be used in an object literal property inside a destructuring assignment."
	},
	"1313": {
		"category": "Error",
		"code": 1313,
		"message": "The body of an 'if' statement cannot be the empty statement."
	},
	"1314": {
		"category": "Error",
		"code": 1314,
		"message": "Global module exports may only appear in module files."
	},
	"1315": {
		"category": "Error",
		"code": 1315,
		"message": "Global module exports may only appear in declaration files."
	},
	"1316": {
		"category": "Error",
		"code": 1316,
		"message": "Global module exports may only appear at top level."
	},
	"1317": {
		"category": "Error",
		"code": 1317,
		"message": "A parameter property cannot be declared using a rest parameter."
	},
	"1318": {
		"category": "Error",
		"code": 1318,
		"message": "An abstract accessor cannot have an implementation."
	},
	"1319": {
		"category": "Error",
		"code": 1319,
		"message": "A default export can only be used in an ECMAScript-style module."
	},
	"1320": {
		"category": "Error",
		"code": 1320,
		"message": "Type of 'await' operand must either be a valid promise or must not contain a callable 'then' member."
	},
	"1321": {
		"category": "Error",
		"code": 1321,
		"message": "Type of 'yield' operand in an async generator must either be a valid promise or must not contain a callable 'then' member."
	},
	"1322": {
		"category": "Error",
		"code": 1322,
		"message": "Type of iterated elements of a 'yield*' operand must either be a valid promise or must not contain a callable 'then' member."
	},
	"1323": {
		"category": "Error",
		"code": 1323,
		"message": "Dynamic imports are only supported when the '--module' flag is set to 'es2020', 'esnext', 'commonjs', 'amd', 'system', or 'umd'."
	},
	"1324": {
		"category": "Error",
		"code": 1324,
		"message": "Dynamic import must have one specifier as an argument."
	},
	"1325": {
		"category": "Error",
		"code": 1325,
		"message": "Specifier of dynamic import cannot be spread element."
	},
	"1326": {
		"category": "Error",
		"code": 1326,
		"message": "Dynamic import cannot have type arguments"
	},
	"1327": {
		"category": "Error",
		"code": 1327,
		"message": "String literal with double quotes expected."
	},
	"1328": {
		"category": "Error",
		"code": 1328,
		"message": "Property value can only be string literal, numeric literal, 'true', 'false', 'null', object literal or array literal."
	},
	"1329": {
		"category": "Error",
		"code": 1329,
		"message": "'{0}' accepts too few arguments to be used as a decorator here. Did you mean to call it first and write '@{0}()'?"
	},
	"1330": {
		"category": "Error",
		"code": 1330,
		"message": "A property of an interface or type literal whose type is a 'unique symbol' type must be 'readonly'."
	},
	"1331": {
		"category": "Error",
		"code": 1331,
		"message": "A property of a class whose type is a 'unique symbol' type must be both 'static' and 'readonly'."
	},
	"1332": {
		"category": "Error",
		"code": 1332,
		"message": "A variable whose type is a 'unique symbol' type must be 'const'."
	},
	"1333": {
		"category": "Error",
		"code": 1333,
		"message": "'unique symbol' types may not be used on a variable declaration with a binding name."
	},
	"1334": {
		"category": "Error",
		"code": 1334,
		"message": "'unique symbol' types are only allowed on variables in a variable statement."
	},
	"1335": {
		"category": "Error",
		"code": 1335,
		"message": "'unique symbol' types are not allowed here."
	},
	"1336": {
		"category": "Error",
		"code": 1336,
		"message": "An index signature parameter type cannot be a type alias. Consider writing '[{0}: {1}]: {2}' instead."
	},
	"1337": {
		"category": "Error",
		"code": 1337,
		"message": "An index signature parameter type cannot be a union type. Consider using a mapped object type instead."
	},
	"1338": {
		"category": "Error",
		"code": 1338,
		"message": "'infer' declarations are only permitted in the 'extends' clause of a conditional type."
	},
	"1339": {
		"category": "Error",
		"code": 1339,
		"message": "Module '{0}' does not refer to a value, but is used as a value here."
	},
	"1340": {
		"category": "Error",
		"code": 1340,
		"message": "Module '{0}' does not refer to a type, but is used as a type here. Did you mean 'typeof import('{0}')'?"
	},
	"1342": {
		"category": "Error",
		"code": 1342,
		"message": "Type arguments cannot be used here."
	},
	"1343": {
		"category": "Error",
		"code": 1343,
		"message": "The 'import.meta' meta-property is only allowed when the '--module' option is 'esnext' or 'system'."
	},
	"1344": {
		"category": "Error",
		"code": 1344,
		"message": "'A label is not allowed here."
	},
	"1345": {
		"category": "Error",
		"code": 1345,
		"message": "An expression of type 'void' cannot be tested for truthiness"
	},
	"1346": {
		"category": "Error",
		"code": 1346,
		"message": "This parameter is not allowed with 'use strict' directive."
	},
	"1347": {
		"category": "Error",
		"code": 1347,
		"message": "'use strict' directive cannot be used with non-simple parameter list."
	},
	"1348": {
		"category": "Error",
		"code": 1348,
		"message": "Non-simple parameter declared here."
	},
	"1349": {
		"category": "Error",
		"code": 1349,
		"message": "'use strict' directive used here."
	},
	"1350": {
		"category": "Message",
		"code": 1350,
		"message": "Print the final configuration instead of building."
	},
	"1351": {
		"category": "Error",
		"code": 1351,
		"message": "An identifier or keyword cannot immediately follow a numeric literal."
	},
	"1352": {
		"category": "Error",
		"code": 1352,
		"message": "A bigint literal cannot use exponential notation."
	},
	"1353": {
		"category": "Error",
		"code": 1353,
		"message": "A bigint literal must be an integer."
	},
	"1354": {
		"category": "Error",
		"code": 1354,
		"message": "'readonly' type modifier is only permitted on array and tuple literal types."
	},
	"1355": {
		"category": "Error",
		"code": 1355,
		"message": "A 'const' assertions can only be applied to references to enum members, or string, number, boolean, array, or object literals."
	},
	"1356": {
		"category": "Error",
		"code": 1356,
		"message": "Did you mean to mark this function as 'async'?"
	},
	"1357": {
		"category": "Error",
		"code": 1357,
		"message": "An enum member name must be followed by a ',', '=', or '}'."
	},
	"1358": {
		"category": "Error",
		"code": 1358,
		"message": "Tagged template expressions are not permitted in an optional chain."
	},
	"1359": {
		"category": "Error",
		"code": 1359,
		"message": "Identifier expected. '{0}' is a reserved word that cannot be used here."
	},
	"1360": {
		"category": "Error",
		"code": 1360,
		"message": "Did you mean to parenthesize this function type?"
	},
	"1361": {
		"category": "Error",
		"code": 1361,
		"message": "'{0}' cannot be used as a value because it was imported using 'import type'."
	},
	"1362": {
		"category": "Error",
		"code": 1362,
		"message": "'{0}' cannot be used as a value because it was exported using 'export type'."
	},
	"1363": {
		"category": "Error",
		"code": 1363,
		"message": "A type-only import can specify a default import or named bindings, but not both."
	},
	"1364": {
		"category": "Message",
		"code": 1364,
		"message": "Convert to type-only export"
	},
	"1365": {
		"category": "Message",
		"code": 1365,
		"message": "Convert all re-exported types to type-only exports"
	},
	"1366": {
		"category": "Message",
		"code": 1366,
		"message": "Split into two separate import declarations"
	},
	"1367": {
		"category": "Message",
		"code": 1367,
		"message": "Split all invalid type-only imports"
	},
	"1368": {
		"category": "Message",
		"code": 1368,
		"message": "Specify emit/checking behavior for imports that are only used for types"
	},
	"1369": {
		"category": "Message",
		"code": 1369,
		"message": "Did you mean '{0}'?"
	},
	"1370": {
		"category": "Error",
		"code": 1370,
		"message": "Only ECMAScript imports may use 'import type'."
	},
	"1371": {
		"category": "Error",
		"code": 1371,
		"message": "This import is never used as a value and must use 'import type' because the 'importsNotUsedAsValues' is set to 'error'."
	},
	"1373": {
		"category": "Message",
		"code": 1373,
		"message": "Convert to type-only import"
	},
	"1374": {
		"category": "Message",
		"code": 1374,
		"message": "Convert all imports not used as a value to type-only imports"
	},
	"1375": {
		"category": "Error",
		"code": 1375,
		"message": "'await' expressions are only allowed at the top level of a file when that file is a module, but this file has no imports or exports. Consider adding an empty 'export {}' to make this file a module."
	},
	"1376": {
		"category": "Message",
		"code": 1376,
		"message": "'{0}' was imported here."
	},
	"1377": {
		"category": "Message",
		"code": 1377,
		"message": "'{0}' was exported here."
	},
	"1378": {
		"category": "Error",
		"code": 1378,
		"message": "Top-level 'await' expressions are only allowed when the 'module' option is set to 'esnext' or 'system', and the 'target' option is set to 'es2017' or higher."
	},
	"1379": {
		"category": "Error",
		"code": 1379,
		"message": "An import alias cannot reference a declaration that was exported using 'export type'."
	},
	"1380": {
		"category": "Error",
		"code": 1380,
		"message": "An import alias cannot reference a declaration that was imported using 'import type'."
	},
	"1381": {
		"category": "Error",
		"code": 1381,
		"message": "Unexpected token. Did you mean `{'}'}` or `&rbrace;`?"
	},
	"1382": {
		"category": "Error",
		"code": 1382,
		"message": "Unexpected token. Did you mean `{'>'}` or `&gt;`?"
	},
	"2200": {
		"category": "Error",
		"code": 2200,
		"message": "The types of '{0}' are incompatible between these types."
	},
	"2201": {
		"category": "Error",
		"code": 2201,
		"message": "The types returned by '{0}' are incompatible between these types."
	},
	"2202": {
		"category": "Error",
		"code": 2202,
		"elidedInCompatabilityPyramid": true,
		"message": "Call signature return types '{0}' and '{1}' are incompatible."
	},
	"2203": {
		"category": "Error",
		"code": 2203,
		"elidedInCompatabilityPyramid": true,
		"message": "Construct signature return types '{0}' and '{1}' are incompatible."
	},
	"2204": {
		"category": "Error",
		"code": 2204,
		"elidedInCompatabilityPyramid": true,
		"message": "Call signatures with no arguments have incompatible return types '{0}' and '{1}'."
	},
	"2205": {
		"category": "Error",
		"code": 2205,
		"elidedInCompatabilityPyramid": true,
		"message": "Construct signatures with no arguments have incompatible return types '{0}' and '{1}'."
	},
	"2300": {
		"category": "Error",
		"code": 2300,
		"message": "Duplicate identifier '{0}'."
	},
	"2301": {
		"category": "Error",
		"code": 2301,
		"message": "Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor."
	},
	"2302": {
		"category": "Error",
		"code": 2302,
		"message": "Static members cannot reference class type parameters."
	},
	"2303": {
		"category": "Error",
		"code": 2303,
		"message": "Circular definition of import alias '{0}'."
	},
	"2304": {
		"category": "Error",
		"code": 2304,
		"message": "Cannot find name '{0}'."
	},
	"2305": {
		"category": "Error",
		"code": 2305,
		"message": "Module '{0}' has no exported member '{1}'."
	},
	"2306": {
		"category": "Error",
		"code": 2306,
		"message": "File '{0}' is not a module."
	},
	"2307": {
		"category": "Error",
		"code": 2307,
		"message": "Cannot find module '{0}'."
	},
	"2308": {
		"category": "Error",
		"code": 2308,
		"message": "Module {0} has already exported a member named '{1}'. Consider explicitly re-exporting to resolve the ambiguity."
	},
	"2309": {
		"category": "Error",
		"code": 2309,
		"message": "An export assignment cannot be used in a module with other exported elements."
	},
	"2310": {
		"category": "Error",
		"code": 2310,
		"message": "Type '{0}' recursively references itself as a base type."
	},
	"2311": {
		"category": "Error",
		"code": 2311,
		"message": "A class may only extend another class."
	},
	"2312": {
		"category": "Error",
		"code": 2312,
		"message": "An interface can only extend an object type or intersection of object types with statically known members."
	},
	"2313": {
		"category": "Error",
		"code": 2313,
		"message": "Type parameter '{0}' has a circular constraint."
	},
	"2314": {
		"category": "Error",
		"code": 2314,
		"message": "Generic type '{0}' requires {1} type argument(s)."
	},
	"2315": {
		"category": "Error",
		"code": 2315,
		"message": "Type '{0}' is not generic."
	},
	"2316": {
		"category": "Error",
		"code": 2316,
		"message": "Global type '{0}' must be a class or interface type."
	},
	"2317": {
		"category": "Error",
		"code": 2317,
		"message": "Global type '{0}' must have {1} type parameter(s)."
	},
	"2318": {
		"category": "Error",
		"code": 2318,
		"message": "Cannot find global type '{0}'."
	},
	"2319": {
		"category": "Error",
		"code": 2319,
		"message": "Named property '{0}' of types '{1}' and '{2}' are not identical."
	},
	"2320": {
		"category": "Error",
		"code": 2320,
		"message": "Interface '{0}' cannot simultaneously extend types '{1}' and '{2}'."
	},
	"2321": {
		"category": "Error",
		"code": 2321,
		"message": "Excessive stack depth comparing types '{0}' and '{1}'."
	},
	"2322": {
		"category": "Error",
		"code": 2322,
		"message": "Type '{0}' is not assignable to type '{1}'."
	},
	"2323": {
		"category": "Error",
		"code": 2323,
		"message": "Cannot redeclare exported variable '{0}'."
	},
	"2324": {
		"category": "Error",
		"code": 2324,
		"message": "Property '{0}' is missing in type '{1}'."
	},
	"2325": {
		"category": "Error",
		"code": 2325,
		"message": "Property '{0}' is private in type '{1}' but not in type '{2}'."
	},
	"2326": {
		"category": "Error",
		"code": 2326,
		"message": "Types of property '{0}' are incompatible."
	},
	"2327": {
		"category": "Error",
		"code": 2327,
		"message": "Property '{0}' is optional in type '{1}' but required in type '{2}'."
	},
	"2328": {
		"category": "Error",
		"code": 2328,
		"message": "Types of parameters '{0}' and '{1}' are incompatible."
	},
	"2329": {
		"category": "Error",
		"code": 2329,
		"message": "Index signature is missing in type '{0}'."
	},
	"2330": {
		"category": "Error",
		"code": 2330,
		"message": "Index signatures are incompatible."
	},
	"2331": {
		"category": "Error",
		"code": 2331,
		"message": "'this' cannot be referenced in a module or namespace body."
	},
	"2332": {
		"category": "Error",
		"code": 2332,
		"message": "'this' cannot be referenced in current location."
	},
	"2333": {
		"category": "Error",
		"code": 2333,
		"message": "'this' cannot be referenced in constructor arguments."
	},
	"2334": {
		"category": "Error",
		"code": 2334,
		"message": "'this' cannot be referenced in a static property initializer."
	},
	"2335": {
		"category": "Error",
		"code": 2335,
		"message": "'super' can only be referenced in a derived class."
	},
	"2336": {
		"category": "Error",
		"code": 2336,
		"message": "'super' cannot be referenced in constructor arguments."
	},
	"2337": {
		"category": "Error",
		"code": 2337,
		"message": "Super calls are not permitted outside constructors or in nested functions inside constructors."
	},
	"2338": {
		"category": "Error",
		"code": 2338,
		"message": "'super' property access is permitted only in a constructor, member function, or member accessor of a derived class."
	},
	"2339": {
		"category": "Error",
		"code": 2339,
		"message": "Property '{0}' does not exist on type '{1}'."
	},
	"2340": {
		"category": "Error",
		"code": 2340,
		"message": "Only public and protected methods of the base class are accessible via the 'super' keyword."
	},
	"2341": {
		"category": "Error",
		"code": 2341,
		"message": "Property '{0}' is private and only accessible within class '{1}'."
	},
	"2342": {
		"category": "Error",
		"code": 2342,
		"message": "An index expression argument must be of type 'string', 'number', 'symbol', or 'any'."
	},
	"2343": {
		"category": "Error",
		"code": 2343,
		"message": "This syntax requires an imported helper named '{1}' which does not exist in '{0}'. Consider upgrading your version of '{0}'."
	},
	"2344": {
		"category": "Error",
		"code": 2344,
		"message": "Type '{0}' does not satisfy the constraint '{1}'."
	},
	"2345": {
		"category": "Error",
		"code": 2345,
		"message": "Argument of type '{0}' is not assignable to parameter of type '{1}'."
	},
	"2346": {
		"category": "Error",
		"code": 2346,
		"message": "Call target does not contain any signatures."
	},
	"2347": {
		"category": "Error",
		"code": 2347,
		"message": "Untyped function calls may not accept type arguments."
	},
	"2348": {
		"category": "Error",
		"code": 2348,
		"message": "Value of type '{0}' is not callable. Did you mean to include 'new'?"
	},
	"2349": {
		"category": "Error",
		"code": 2349,
		"message": "This expression is not callable."
	},
	"2350": {
		"category": "Error",
		"code": 2350,
		"message": "Only a void function can be called with the 'new' keyword."
	},
	"2351": {
		"category": "Error",
		"code": 2351,
		"message": "This expression is not constructable."
	},
	"2352": {
		"category": "Error",
		"code": 2352,
		"message": "Conversion of type '{0}' to type '{1}' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first."
	},
	"2353": {
		"category": "Error",
		"code": 2353,
		"message": "Object literal may only specify known properties, and '{0}' does not exist in type '{1}'."
	},
	"2354": {
		"category": "Error",
		"code": 2354,
		"message": "This syntax requires an imported helper but module '{0}' cannot be found."
	},
	"2355": {
		"category": "Error",
		"code": 2355,
		"message": "A function whose declared type is neither 'void' nor 'any' must return a value."
	},
	"2356": {
		"category": "Error",
		"code": 2356,
		"message": "An arithmetic operand must be of type 'any', 'number', 'bigint' or an enum type."
	},
	"2357": {
		"category": "Error",
		"code": 2357,
		"message": "The operand of an increment or decrement operator must be a variable or a property access."
	},
	"2358": {
		"category": "Error",
		"code": 2358,
		"message": "The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter."
	},
	"2359": {
		"category": "Error",
		"code": 2359,
		"message": "The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type."
	},
	"2360": {
		"category": "Error",
		"code": 2360,
		"message": "The left-hand side of an 'in' expression must be of type 'any', 'string', 'number', or 'symbol'."
	},
	"2361": {
		"category": "Error",
		"code": 2361,
		"message": "The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter."
	},
	"2362": {
		"category": "Error",
		"code": 2362,
		"message": "The left-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
	},
	"2363": {
		"category": "Error",
		"code": 2363,
		"message": "The right-hand side of an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum type."
	},
	"2364": {
		"category": "Error",
		"code": 2364,
		"message": "The left-hand side of an assignment expression must be a variable or a property access."
	},
	"2365": {
		"category": "Error",
		"code": 2365,
		"message": "Operator '{0}' cannot be applied to types '{1}' and '{2}'."
	},
	"2366": {
		"category": "Error",
		"code": 2366,
		"message": "Function lacks ending return statement and return type does not include 'undefined'."
	},
	"2367": {
		"category": "Error",
		"code": 2367,
		"message": "This condition will always return '{0}' since the types '{1}' and '{2}' have no overlap."
	},
	"2368": {
		"category": "Error",
		"code": 2368,
		"message": "Type parameter name cannot be '{0}'."
	},
	"2369": {
		"category": "Error",
		"code": 2369,
		"message": "A parameter property is only allowed in a constructor implementation."
	},
	"2370": {
		"category": "Error",
		"code": 2370,
		"message": "A rest parameter must be of an array type."
	},
	"2371": {
		"category": "Error",
		"code": 2371,
		"message": "A parameter initializer is only allowed in a function or constructor implementation."
	},
	"2372": {
		"category": "Error",
		"code": 2372,
		"message": "Parameter '{0}' cannot be referenced in its initializer."
	},
	"2373": {
		"category": "Error",
		"code": 2373,
		"message": "Initializer of parameter '{0}' cannot reference identifier '{1}' declared after it."
	},
	"2374": {
		"category": "Error",
		"code": 2374,
		"message": "Duplicate string index signature."
	},
	"2375": {
		"category": "Error",
		"code": 2375,
		"message": "Duplicate number index signature."
	},
	"2376": {
		"category": "Error",
		"code": 2376,
		"message": "A 'super' call must be the first statement in the constructor when a class contains initialized properties, parameter properties, or private identifiers."
	},
	"2377": {
		"category": "Error",
		"code": 2377,
		"message": "Constructors for derived classes must contain a 'super' call."
	},
	"2378": {
		"category": "Error",
		"code": 2378,
		"message": "A 'get' accessor must return a value."
	},
	"2379": {
		"category": "Error",
		"code": 2379,
		"message": "Getter and setter accessors do not agree in visibility."
	},
	"2380": {
		"category": "Error",
		"code": 2380,
		"message": "'get' and 'set' accessor must have the same type."
	},
	"2381": {
		"category": "Error",
		"code": 2381,
		"message": "A signature with an implementation cannot use a string literal type."
	},
	"2382": {
		"category": "Error",
		"code": 2382,
		"message": "Specialized overload signature is not assignable to any non-specialized signature."
	},
	"2383": {
		"category": "Error",
		"code": 2383,
		"message": "Overload signatures must all be exported or non-exported."
	},
	"2384": {
		"category": "Error",
		"code": 2384,
		"message": "Overload signatures must all be ambient or non-ambient."
	},
	"2385": {
		"category": "Error",
		"code": 2385,
		"message": "Overload signatures must all be public, private or protected."
	},
	"2386": {
		"category": "Error",
		"code": 2386,
		"message": "Overload signatures must all be optional or required."
	},
	"2387": {
		"category": "Error",
		"code": 2387,
		"message": "Function overload must be static."
	},
	"2388": {
		"category": "Error",
		"code": 2388,
		"message": "Function overload must not be static."
	},
	"2389": {
		"category": "Error",
		"code": 2389,
		"message": "Function implementation name must be '{0}'."
	},
	"2390": {
		"category": "Error",
		"code": 2390,
		"message": "Constructor implementation is missing."
	},
	"2391": {
		"category": "Error",
		"code": 2391,
		"message": "Function implementation is missing or not immediately following the declaration."
	},
	"2392": {
		"category": "Error",
		"code": 2392,
		"message": "Multiple constructor implementations are not allowed."
	},
	"2393": {
		"category": "Error",
		"code": 2393,
		"message": "Duplicate function implementation."
	},
	"2394": {
		"category": "Error",
		"code": 2394,
		"message": "This overload signature is not compatible with its implementation signature."
	},
	"2395": {
		"category": "Error",
		"code": 2395,
		"message": "Individual declarations in merged declaration '{0}' must be all exported or all local."
	},
	"2396": {
		"category": "Error",
		"code": 2396,
		"message": "Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters."
	},
	"2397": {
		"category": "Error",
		"code": 2397,
		"message": "Declaration name conflicts with built-in global identifier '{0}'."
	},
	"2399": {
		"category": "Error",
		"code": 2399,
		"message": "Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference."
	},
	"2400": {
		"category": "Error",
		"code": 2400,
		"message": "Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference."
	},
	"2401": {
		"category": "Error",
		"code": 2401,
		"message": "Duplicate identifier '_super'. Compiler uses '_super' to capture base class reference."
	},
	"2402": {
		"category": "Error",
		"code": 2402,
		"message": "Expression resolves to '_super' that compiler uses to capture base class reference."
	},
	"2403": {
		"category": "Error",
		"code": 2403,
		"message": "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'."
	},
	"2404": {
		"category": "Error",
		"code": 2404,
		"message": "The left-hand side of a 'for...in' statement cannot use a type annotation."
	},
	"2405": {
		"category": "Error",
		"code": 2405,
		"message": "The left-hand side of a 'for...in' statement must be of type 'string' or 'any'."
	},
	"2406": {
		"category": "Error",
		"code": 2406,
		"message": "The left-hand side of a 'for...in' statement must be a variable or a property access."
	},
	"2407": {
		"category": "Error",
		"code": 2407,
		"message": "The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter, but here has type '{0}'."
	},
	"2408": {
		"category": "Error",
		"code": 2408,
		"message": "Setters cannot return a value."
	},
	"2409": {
		"category": "Error",
		"code": 2409,
		"message": "Return type of constructor signature must be assignable to the instance type of the class."
	},
	"2410": {
		"category": "Error",
		"code": 2410,
		"message": "The 'with' statement is not supported. All symbols in a 'with' block will have type 'any'."
	},
	"2411": {
		"category": "Error",
		"code": 2411,
		"message": "Property '{0}' of type '{1}' is not assignable to string index type '{2}'."
	},
	"2412": {
		"category": "Error",
		"code": 2412,
		"message": "Property '{0}' of type '{1}' is not assignable to numeric index type '{2}'."
	},
	"2413": {
		"category": "Error",
		"code": 2413,
		"message": "Numeric index type '{0}' is not assignable to string index type '{1}'."
	},
	"2414": {
		"category": "Error",
		"code": 2414,
		"message": "Class name cannot be '{0}'."
	},
	"2415": {
		"category": "Error",
		"code": 2415,
		"message": "Class '{0}' incorrectly extends base class '{1}'."
	},
	"2416": {
		"category": "Error",
		"code": 2416,
		"message": "Property '{0}' in type '{1}' is not assignable to the same property in base type '{2}'."
	},
	"2417": {
		"category": "Error",
		"code": 2417,
		"message": "Class static side '{0}' incorrectly extends base class static side '{1}'."
	},
	"2418": {
		"category": "Error",
		"code": 2418,
		"message": "Type of computed property's value is '{0}', which is not assignable to type '{1}'."
	},
	"2420": {
		"category": "Error",
		"code": 2420,
		"message": "Class '{0}' incorrectly implements interface '{1}'."
	},
	"2422": {
		"category": "Error",
		"code": 2422,
		"message": "A class can only implement an object type or intersection of object types with statically known members."
	},
	"2423": {
		"category": "Error",
		"code": 2423,
		"message": "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor."
	},
	"2425": {
		"category": "Error",
		"code": 2425,
		"message": "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function."
	},
	"2426": {
		"category": "Error",
		"code": 2426,
		"message": "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function."
	},
	"2427": {
		"category": "Error",
		"code": 2427,
		"message": "Interface name cannot be '{0}'."
	},
	"2428": {
		"category": "Error",
		"code": 2428,
		"message": "All declarations of '{0}' must have identical type parameters."
	},
	"2430": {
		"category": "Error",
		"code": 2430,
		"message": "Interface '{0}' incorrectly extends interface '{1}'."
	},
	"2431": {
		"category": "Error",
		"code": 2431,
		"message": "Enum name cannot be '{0}'."
	},
	"2432": {
		"category": "Error",
		"code": 2432,
		"message": "In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element."
	},
	"2433": {
		"category": "Error",
		"code": 2433,
		"message": "A namespace declaration cannot be in a different file from a class or function with which it is merged."
	},
	"2434": {
		"category": "Error",
		"code": 2434,
		"message": "A namespace declaration cannot be located prior to a class or function with which it is merged."
	},
	"2435": {
		"category": "Error",
		"code": 2435,
		"message": "Ambient modules cannot be nested in other modules or namespaces."
	},
	"2436": {
		"category": "Error",
		"code": 2436,
		"message": "Ambient module declaration cannot specify relative module name."
	},
	"2437": {
		"category": "Error",
		"code": 2437,
		"message": "Module '{0}' is hidden by a local declaration with the same name."
	},
	"2438": {
		"category": "Error",
		"code": 2438,
		"message": "Import name cannot be '{0}'."
	},
	"2439": {
		"category": "Error",
		"code": 2439,
		"message": "Import or export declaration in an ambient module declaration cannot reference module through relative module name."
	},
	"2440": {
		"category": "Error",
		"code": 2440,
		"message": "Import declaration conflicts with local declaration of '{0}'."
	},
	"2441": {
		"category": "Error",
		"code": 2441,
		"message": "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module."
	},
	"2442": {
		"category": "Error",
		"code": 2442,
		"message": "Types have separate declarations of a private property '{0}'."
	},
	"2443": {
		"category": "Error",
		"code": 2443,
		"message": "Property '{0}' is protected but type '{1}' is not a class derived from '{2}'."
	},
	"2444": {
		"category": "Error",
		"code": 2444,
		"message": "Property '{0}' is protected in type '{1}' but public in type '{2}'."
	},
	"2445": {
		"category": "Error",
		"code": 2445,
		"message": "Property '{0}' is protected and only accessible within class '{1}' and its subclasses."
	},
	"2446": {
		"category": "Error",
		"code": 2446,
		"message": "Property '{0}' is protected and only accessible through an instance of class '{1}'."
	},
	"2447": {
		"category": "Error",
		"code": 2447,
		"message": "The '{0}' operator is not allowed for boolean types. Consider using '{1}' instead."
	},
	"2448": {
		"category": "Error",
		"code": 2448,
		"message": "Block-scoped variable '{0}' used before its declaration."
	},
	"2449": {
		"category": "Error",
		"code": 2449,
		"message": "Class '{0}' used before its declaration."
	},
	"2450": {
		"category": "Error",
		"code": 2450,
		"message": "Enum '{0}' used before its declaration."
	},
	"2451": {
		"category": "Error",
		"code": 2451,
		"message": "Cannot redeclare block-scoped variable '{0}'."
	},
	"2452": {
		"category": "Error",
		"code": 2452,
		"message": "An enum member cannot have a numeric name."
	},
	"2453": {
		"category": "Error",
		"code": 2453,
		"message": "The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly."
	},
	"2454": {
		"category": "Error",
		"code": 2454,
		"message": "Variable '{0}' is used before being assigned."
	},
	"2455": {
		"category": "Error",
		"code": 2455,
		"message": "Type argument candidate '{1}' is not a valid type argument because it is not a supertype of candidate '{0}'."
	},
	"2456": {
		"category": "Error",
		"code": 2456,
		"message": "Type alias '{0}' circularly references itself."
	},
	"2457": {
		"category": "Error",
		"code": 2457,
		"message": "Type alias name cannot be '{0}'."
	},
	"2458": {
		"category": "Error",
		"code": 2458,
		"message": "An AMD module cannot have multiple name assignments."
	},
	"2459": {
		"category": "Error",
		"code": 2459,
		"message": "Module '{0}' declares '{1}' locally, but it is not exported."
	},
	"2460": {
		"category": "Error",
		"code": 2460,
		"message": "Module '{0}' declares '{1}' locally, but it is exported as '{2}'."
	},
	"2461": {
		"category": "Error",
		"code": 2461,
		"message": "Type '{0}' is not an array type."
	},
	"2462": {
		"category": "Error",
		"code": 2462,
		"message": "A rest element must be last in a destructuring pattern."
	},
	"2463": {
		"category": "Error",
		"code": 2463,
		"message": "A binding pattern parameter cannot be optional in an implementation signature."
	},
	"2464": {
		"category": "Error",
		"code": 2464,
		"message": "A computed property name must be of type 'string', 'number', 'symbol', or 'any'."
	},
	"2465": {
		"category": "Error",
		"code": 2465,
		"message": "'this' cannot be referenced in a computed property name."
	},
	"2466": {
		"category": "Error",
		"code": 2466,
		"message": "'super' cannot be referenced in a computed property name."
	},
	"2467": {
		"category": "Error",
		"code": 2467,
		"message": "A computed property name cannot reference a type parameter from its containing type."
	},
	"2468": {
		"category": "Error",
		"code": 2468,
		"message": "Cannot find global value '{0}'."
	},
	"2469": {
		"category": "Error",
		"code": 2469,
		"message": "The '{0}' operator cannot be applied to type 'symbol'."
	},
	"2470": {
		"category": "Error",
		"code": 2470,
		"message": "'Symbol' reference does not refer to the global Symbol constructor object."
	},
	"2471": {
		"category": "Error",
		"code": 2471,
		"message": "A computed property name of the form '{0}' must be of type 'symbol'."
	},
	"2472": {
		"category": "Error",
		"code": 2472,
		"message": "Spread operator in 'new' expressions is only available when targeting ECMAScript 5 and higher."
	},
	"2473": {
		"category": "Error",
		"code": 2473,
		"message": "Enum declarations must all be const or non-const."
	},
	"2474": {
		"category": "Error",
		"code": 2474,
		"message": "const enum member initializers can only contain literal values and other computed enum values."
	},
	"2475": {
		"category": "Error",
		"code": 2475,
		"message": "'const' enums can only be used in property or index access expressions or the right hand side of an import declaration or export assignment or type query."
	},
	"2476": {
		"category": "Error",
		"code": 2476,
		"message": "A const enum member can only be accessed using a string literal."
	},
	"2477": {
		"category": "Error",
		"code": 2477,
		"message": "'const' enum member initializer was evaluated to a non-finite value."
	},
	"2478": {
		"category": "Error",
		"code": 2478,
		"message": "'const' enum member initializer was evaluated to disallowed value 'NaN'."
	},
	"2479": {
		"category": "Error",
		"code": 2479,
		"message": "Property '{0}' does not exist on 'const' enum '{1}'."
	},
	"2480": {
		"category": "Error",
		"code": 2480,
		"message": "'let' is not allowed to be used as a name in 'let' or 'const' declarations."
	},
	"2481": {
		"category": "Error",
		"code": 2481,
		"message": "Cannot initialize outer scoped variable '{0}' in the same scope as block scoped declaration '{1}'."
	},
	"2483": {
		"category": "Error",
		"code": 2483,
		"message": "The left-hand side of a 'for...of' statement cannot use a type annotation."
	},
	"2484": {
		"category": "Error",
		"code": 2484,
		"message": "Export declaration conflicts with exported declaration of '{0}'."
	},
	"2487": {
		"category": "Error",
		"code": 2487,
		"message": "The left-hand side of a 'for...of' statement must be a variable or a property access."
	},
	"2488": {
		"category": "Error",
		"code": 2488,
		"message": "Type '{0}' must have a '[Symbol.iterator]()' method that returns an iterator."
	},
	"2489": {
		"category": "Error",
		"code": 2489,
		"message": "An iterator must have a 'next()' method."
	},
	"2490": {
		"category": "Error",
		"code": 2490,
		"message": "The type returned by the '{0}()' method of an iterator must have a 'value' property."
	},
	"2491": {
		"category": "Error",
		"code": 2491,
		"message": "The left-hand side of a 'for...in' statement cannot be a destructuring pattern."
	},
	"2492": {
		"category": "Error",
		"code": 2492,
		"message": "Cannot redeclare identifier '{0}' in catch clause."
	},
	"2493": {
		"category": "Error",
		"code": 2493,
		"message": "Tuple type '{0}' of length '{1}' has no element at index '{2}'."
	},
	"2494": {
		"category": "Error",
		"code": 2494,
		"message": "Using a string in a 'for...of' statement is only supported in ECMAScript 5 and higher."
	},
	"2495": {
		"category": "Error",
		"code": 2495,
		"message": "Type '{0}' is not an array type or a string type."
	},
	"2496": {
		"category": "Error",
		"code": 2496,
		"message": "The 'arguments' object cannot be referenced in an arrow function in ES3 and ES5. Consider using a standard function expression."
	},
	"2497": {
		"category": "Error",
		"code": 2497,
		"message": "This module can only be referenced with ECMAScript imports/exports by turning on the '{0}' flag and referencing its default export."
	},
	"2498": {
		"category": "Error",
		"code": 2498,
		"message": "Module '{0}' uses 'export =' and cannot be used with 'export *'."
	},
	"2499": {
		"category": "Error",
		"code": 2499,
		"message": "An interface can only extend an identifier/qualified-name with optional type arguments."
	},
	"2500": {
		"category": "Error",
		"code": 2500,
		"message": "A class can only implement an identifier/qualified-name with optional type arguments."
	},
	"2501": {
		"category": "Error",
		"code": 2501,
		"message": "A rest element cannot contain a binding pattern."
	},
	"2502": {
		"category": "Error",
		"code": 2502,
		"message": "'{0}' is referenced directly or indirectly in its own type annotation."
	},
	"2503": {
		"category": "Error",
		"code": 2503,
		"message": "Cannot find namespace '{0}'."
	},
	"2504": {
		"category": "Error",
		"code": 2504,
		"message": "Type '{0}' must have a '[Symbol.asyncIterator]()' method that returns an async iterator."
	},
	"2505": {
		"category": "Error",
		"code": 2505,
		"message": "A generator cannot have a 'void' type annotation."
	},
	"2506": {
		"category": "Error",
		"code": 2506,
		"message": "'{0}' is referenced directly or indirectly in its own base expression."
	},
	"2507": {
		"category": "Error",
		"code": 2507,
		"message": "Type '{0}' is not a constructor function type."
	},
	"2508": {
		"category": "Error",
		"code": 2508,
		"message": "No base constructor has the specified number of type arguments."
	},
	"2509": {
		"category": "Error",
		"code": 2509,
		"message": "Base constructor return type '{0}' is not an object type or intersection of object types with statically known members."
	},
	"2510": {
		"category": "Error",
		"code": 2510,
		"message": "Base constructors must all have the same return type."
	},
	"2511": {
		"category": "Error",
		"code": 2511,
		"message": "Cannot create an instance of an abstract class."
	},
	"2512": {
		"category": "Error",
		"code": 2512,
		"message": "Overload signatures must all be abstract or non-abstract."
	},
	"2513": {
		"category": "Error",
		"code": 2513,
		"message": "Abstract method '{0}' in class '{1}' cannot be accessed via super expression."
	},
	"2514": {
		"category": "Error",
		"code": 2514,
		"message": "Classes containing abstract methods must be marked abstract."
	},
	"2515": {
		"category": "Error",
		"code": 2515,
		"message": "Non-abstract class '{0}' does not implement inherited abstract member '{1}' from class '{2}'."
	},
	"2516": {
		"category": "Error",
		"code": 2516,
		"message": "All declarations of an abstract method must be consecutive."
	},
	"2517": {
		"category": "Error",
		"code": 2517,
		"message": "Cannot assign an abstract constructor type to a non-abstract constructor type."
	},
	"2518": {
		"category": "Error",
		"code": 2518,
		"message": "A 'this'-based type guard is not compatible with a parameter-based type guard."
	},
	"2519": {
		"category": "Error",
		"code": 2519,
		"message": "An async iterator must have a 'next()' method."
	},
	"2520": {
		"category": "Error",
		"code": 2520,
		"message": "Duplicate identifier '{0}'. Compiler uses declaration '{1}' to support async functions."
	},
	"2521": {
		"category": "Error",
		"code": 2521,
		"message": "Expression resolves to variable declaration '{0}' that compiler uses to support async functions."
	},
	"2522": {
		"category": "Error",
		"code": 2522,
		"message": "The 'arguments' object cannot be referenced in an async function or method in ES3 and ES5. Consider using a standard function or method."
	},
	"2523": {
		"category": "Error",
		"code": 2523,
		"message": "'yield' expressions cannot be used in a parameter initializer."
	},
	"2524": {
		"category": "Error",
		"code": 2524,
		"message": "'await' expressions cannot be used in a parameter initializer."
	},
	"2525": {
		"category": "Error",
		"code": 2525,
		"message": "Initializer provides no value for this binding element and the binding element has no default value."
	},
	"2526": {
		"category": "Error",
		"code": 2526,
		"message": "A 'this' type is available only in a non-static member of a class or interface."
	},
	"2527": {
		"category": "Error",
		"code": 2527,
		"message": "The inferred type of '{0}' references an inaccessible '{1}' type. A type annotation is necessary."
	},
	"2528": {
		"category": "Error",
		"code": 2528,
		"message": "A module cannot have multiple default exports."
	},
	"2529": {
		"category": "Error",
		"code": 2529,
		"message": "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module containing async functions."
	},
	"2530": {
		"category": "Error",
		"code": 2530,
		"message": "Property '{0}' is incompatible with index signature."
	},
	"2531": {
		"category": "Error",
		"code": 2531,
		"message": "Object is possibly 'null'."
	},
	"2532": {
		"category": "Error",
		"code": 2532,
		"message": "Object is possibly 'undefined'."
	},
	"2533": {
		"category": "Error",
		"code": 2533,
		"message": "Object is possibly 'null' or 'undefined'."
	},
	"2534": {
		"category": "Error",
		"code": 2534,
		"message": "A function returning 'never' cannot have a reachable end point."
	},
	"2535": {
		"category": "Error",
		"code": 2535,
		"message": "Enum type '{0}' has members with initializers that are not literals."
	},
	"2536": {
		"category": "Error",
		"code": 2536,
		"message": "Type '{0}' cannot be used to index type '{1}'."
	},
	"2537": {
		"category": "Error",
		"code": 2537,
		"message": "Type '{0}' has no matching index signature for type '{1}'."
	},
	"2538": {
		"category": "Error",
		"code": 2538,
		"message": "Type '{0}' cannot be used as an index type."
	},
	"2539": {
		"category": "Error",
		"code": 2539,
		"message": "Cannot assign to '{0}' because it is not a variable."
	},
	"2540": {
		"category": "Error",
		"code": 2540,
		"message": "Cannot assign to '{0}' because it is a read-only property."
	},
	"2541": {
		"category": "Error",
		"code": 2541,
		"message": "The target of an assignment must be a variable or a property access."
	},
	"2542": {
		"category": "Error",
		"code": 2542,
		"message": "Index signature in type '{0}' only permits reading."
	},
	"2543": {
		"category": "Error",
		"code": 2543,
		"message": "Duplicate identifier '_newTarget'. Compiler uses variable declaration '_newTarget' to capture 'new.target' meta-property reference."
	},
	"2544": {
		"category": "Error",
		"code": 2544,
		"message": "Expression resolves to variable declaration '_newTarget' that compiler uses to capture 'new.target' meta-property reference."
	},
	"2545": {
		"category": "Error",
		"code": 2545,
		"message": "A mixin class must have a constructor with a single rest parameter of type 'any[]'."
	},
	"2546": {
		"category": "Error",
		"code": 2546,
		"message": "Property '{0}' has conflicting declarations and is inaccessible in type '{1}'."
	},
	"2547": {
		"category": "Error",
		"code": 2547,
		"message": "The type returned by the '{0}()' method of an async iterator must be a promise for a type with a 'value' property."
	},
	"2548": {
		"category": "Error",
		"code": 2548,
		"message": "Type '{0}' is not an array type or does not have a '[Symbol.iterator]()' method that returns an iterator."
	},
	"2549": {
		"category": "Error",
		"code": 2549,
		"message": "Type '{0}' is not an array type or a string type or does not have a '[Symbol.iterator]()' method that returns an iterator."
	},
	"2551": {
		"category": "Error",
		"code": 2551,
		"message": "Property '{0}' does not exist on type '{1}'. Did you mean '{2}'?"
	},
	"2552": {
		"category": "Error",
		"code": 2552,
		"message": "Cannot find name '{0}'. Did you mean '{1}'?"
	},
	"2553": {
		"category": "Error",
		"code": 2553,
		"message": "Computed values are not permitted in an enum with string valued members."
	},
	"2554": {
		"category": "Error",
		"code": 2554,
		"message": "Expected {0} arguments, but got {1}."
	},
	"2555": {
		"category": "Error",
		"code": 2555,
		"message": "Expected at least {0} arguments, but got {1}."
	},
	"2556": {
		"category": "Error",
		"code": 2556,
		"message": "Expected {0} arguments, but got {1} or more."
	},
	"2557": {
		"category": "Error",
		"code": 2557,
		"message": "Expected at least {0} arguments, but got {1} or more."
	},
	"2558": {
		"category": "Error",
		"code": 2558,
		"message": "Expected {0} type arguments, but got {1}."
	},
	"2559": {
		"category": "Error",
		"code": 2559,
		"message": "Type '{0}' has no properties in common with type '{1}'."
	},
	"2560": {
		"category": "Error",
		"code": 2560,
		"message": "Value of type '{0}' has no properties in common with type '{1}'. Did you mean to call it?"
	},
	"2561": {
		"category": "Error",
		"code": 2561,
		"message": "Object literal may only specify known properties, but '{0}' does not exist in type '{1}'. Did you mean to write '{2}'?"
	},
	"2562": {
		"category": "Error",
		"code": 2562,
		"message": "Base class expressions cannot reference class type parameters."
	},
	"2563": {
		"category": "Error",
		"code": 2563,
		"message": "The containing function or module body is too large for control flow analysis."
	},
	"2564": {
		"category": "Error",
		"code": 2564,
		"message": "Property '{0}' has no initializer and is not definitely assigned in the constructor."
	},
	"2565": {
		"category": "Error",
		"code": 2565,
		"message": "Property '{0}' is used before being assigned."
	},
	"2566": {
		"category": "Error",
		"code": 2566,
		"message": "A rest element cannot have a property name."
	},
	"2567": {
		"category": "Error",
		"code": 2567,
		"message": "Enum declarations can only merge with namespace or other enum declarations."
	},
	"2569": {
		"category": "Error",
		"code": 2569,
		"message": "Type '{0}' is not an array type or a string type. Use compiler option '--downlevelIteration' to allow iterating of iterators."
	},
	"2571": {
		"category": "Error",
		"code": 2571,
		"message": "Object is of type 'unknown'."
	},
	"2572": {
		"category": "Error",
		"code": 2572,
		"message": "Rest signatures are incompatible."
	},
	"2573": {
		"category": "Error",
		"code": 2573,
		"message": "Property '{0}' is incompatible with rest element type."
	},
	"2574": {
		"category": "Error",
		"code": 2574,
		"message": "A rest element type must be an array type."
	},
	"2575": {
		"category": "Error",
		"code": 2575,
		"message": "No overload expects {0} arguments, but overloads do exist that expect either {1} or {2} arguments."
	},
	"2576": {
		"category": "Error",
		"code": 2576,
		"message": "Property '{0}' is a static member of type '{1}'"
	},
	"2577": {
		"category": "Error",
		"code": 2577,
		"message": "Return type annotation circularly references itself."
	},
	"2580": {
		"category": "Error",
		"code": 2580,
		"message": "Cannot find name '{0}'. Do you need to install type definitions for node? Try `npm i @types/node`."
	},
	"2581": {
		"category": "Error",
		"code": 2581,
		"message": "Cannot find name '{0}'. Do you need to install type definitions for jQuery? Try `npm i @types/jquery`."
	},
	"2582": {
		"category": "Error",
		"code": 2582,
		"message": "Cannot find name '{0}'. Do you need to install type definitions for a test runner? Try `npm i @types/jest` or `npm i @types/mocha`."
	},
	"2583": {
		"category": "Error",
		"code": 2583,
		"message": "Cannot find name '{0}'. Do you need to change your target library? Try changing the `lib` compiler option to es2015 or later."
	},
	"2584": {
		"category": "Error",
		"code": 2584,
		"message": "Cannot find name '{0}'. Do you need to change your target library? Try changing the `lib` compiler option to include 'dom'."
	},
	"2585": {
		"category": "Error",
		"code": 2585,
		"message": "'{0}' only refers to a type, but is being used as a value here. Do you need to change your target library? Try changing the `lib` compiler option to es2015 or later."
	},
	"2586": {
		"category": "Error",
		"code": 2586,
		"message": "Enum type '{0}' circularly references itself."
	},
	"2587": {
		"category": "Error",
		"code": 2587,
		"message": "JSDoc type '{0}' circularly references itself."
	},
	"2588": {
		"category": "Error",
		"code": 2588,
		"message": "Cannot assign to '{0}' because it is a constant."
	},
	"2589": {
		"category": "Error",
		"code": 2589,
		"message": "Type instantiation is excessively deep and possibly infinite."
	},
	"2590": {
		"category": "Error",
		"code": 2590,
		"message": "Expression produces a union type that is too complex to represent."
	},
	"2591": {
		"category": "Error",
		"code": 2591,
		"message": "Cannot find name '{0}'. Do you need to install type definitions for node? Try `npm i @types/node` and then add `node` to the types field in your tsconfig."
	},
	"2592": {
		"category": "Error",
		"code": 2592,
		"message": "Cannot find name '{0}'. Do you need to install type definitions for jQuery? Try `npm i @types/jquery` and then add `jquery` to the types field in your tsconfig."
	},
	"2593": {
		"category": "Error",
		"code": 2593,
		"message": "Cannot find name '{0}'. Do you need to install type definitions for a test runner? Try `npm i @types/jest` or `npm i @types/mocha` and then add `jest` or `mocha` to the types field in your tsconfig."
	},
	"2594": {
		"category": "Error",
		"code": 2594,
		"message": "This module is declared with using 'export =', and can only be used with a default import when using the '{0}' flag."
	},
	"2600": {
		"category": "Error",
		"code": 2600,
		"message": "JSX element attributes type '{0}' may not be a union type."
	},
	"2601": {
		"category": "Error",
		"code": 2601,
		"message": "The return type of a JSX element constructor must return an object type."
	},
	"2602": {
		"category": "Error",
		"code": 2602,
		"message": "JSX element implicitly has type 'any' because the global type 'JSX.Element' does not exist."
	},
	"2603": {
		"category": "Error",
		"code": 2603,
		"message": "Property '{0}' in type '{1}' is not assignable to type '{2}'."
	},
	"2604": {
		"category": "Error",
		"code": 2604,
		"message": "JSX element type '{0}' does not have any construct or call signatures."
	},
	"2605": {
		"category": "Error",
		"code": 2605,
		"message": "JSX element type '{0}' is not a constructor function for JSX elements."
	},
	"2606": {
		"category": "Error",
		"code": 2606,
		"message": "Property '{0}' of JSX spread attribute is not assignable to target property."
	},
	"2607": {
		"category": "Error",
		"code": 2607,
		"message": "JSX element class does not support attributes because it does not have a '{0}' property."
	},
	"2608": {
		"category": "Error",
		"code": 2608,
		"message": "The global type 'JSX.{0}' may not have more than one property."
	},
	"2609": {
		"category": "Error",
		"code": 2609,
		"message": "JSX spread child must be an array type."
	},
	"2610": {
		"category": "Error",
		"code": 2610,
		"message": "'{0}' is defined as an accessor in class '{1}', but is overridden here in '{2}' as an instance property."
	},
	"2611": {
		"category": "Error",
		"code": 2611,
		"message": "'{0}' is defined as a property in class '{1}', but is overridden here in '{2}' as an accessor."
	},
	"2612": {
		"category": "Error",
		"code": 2612,
		"message": "Property '{0}' will overwrite the base property in '{1}'. If this is intentional, add an initializer. Otherwise, add a 'declare' modifier or remove the redundant declaration."
	},
	"2613": {
		"category": "Error",
		"code": 2613,
		"message": "Module '{0}' has no default export. Did you mean to use 'import { {1} } from {0}' instead?"
	},
	"2614": {
		"category": "Error",
		"code": 2614,
		"message": "Module '{0}' has no exported member '{1}'. Did you mean to use 'import {1} from {0}' instead?"
	},
	"2649": {
		"category": "Error",
		"code": 2649,
		"message": "Cannot augment module '{0}' with value exports because it resolves to a non-module entity."
	},
	"2651": {
		"category": "Error",
		"code": 2651,
		"message": "A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums."
	},
	"2652": {
		"category": "Error",
		"code": 2652,
		"message": "Merged declaration '{0}' cannot include a default export declaration. Consider adding a separate 'export default {0}' declaration instead."
	},
	"2653": {
		"category": "Error",
		"code": 2653,
		"message": "Non-abstract class expression does not implement inherited abstract member '{0}' from class '{1}'."
	},
	"2654": {
		"category": "Error",
		"code": 2654,
		"message": "Exported external package typings file cannot contain tripleslash references. Please contact the package author to update the package definition."
	},
	"2656": {
		"category": "Error",
		"code": 2656,
		"message": "Exported external package typings file '{0}' is not a module. Please contact the package author to update the package definition."
	},
	"2657": {
		"category": "Error",
		"code": 2657,
		"message": "JSX expressions must have one parent element."
	},
	"2658": {
		"category": "Error",
		"code": 2658,
		"message": "Type '{0}' provides no match for the signature '{1}'."
	},
	"2659": {
		"category": "Error",
		"code": 2659,
		"message": "'super' is only allowed in members of object literal expressions when option 'target' is 'ES2015' or higher."
	},
	"2660": {
		"category": "Error",
		"code": 2660,
		"message": "'super' can only be referenced in members of derived classes or object literal expressions."
	},
	"2661": {
		"category": "Error",
		"code": 2661,
		"message": "Cannot export '{0}'. Only local declarations can be exported from a module."
	},
	"2662": {
		"category": "Error",
		"code": 2662,
		"message": "Cannot find name '{0}'. Did you mean the static member '{1}.{0}'?"
	},
	"2663": {
		"category": "Error",
		"code": 2663,
		"message": "Cannot find name '{0}'. Did you mean the instance member 'this.{0}'?"
	},
	"2664": {
		"category": "Error",
		"code": 2664,
		"message": "Invalid module name in augmentation, module '{0}' cannot be found."
	},
	"2665": {
		"category": "Error",
		"code": 2665,
		"message": "Invalid module name in augmentation. Module '{0}' resolves to an untyped module at '{1}', which cannot be augmented."
	},
	"2666": {
		"category": "Error",
		"code": 2666,
		"message": "Exports and export assignments are not permitted in module augmentations."
	},
	"2667": {
		"category": "Error",
		"code": 2667,
		"message": "Imports are not permitted in module augmentations. Consider moving them to the enclosing external module."
	},
	"2668": {
		"category": "Error",
		"code": 2668,
		"message": "'export' modifier cannot be applied to ambient modules and module augmentations since they are always visible."
	},
	"2669": {
		"category": "Error",
		"code": 2669,
		"message": "Augmentations for the global scope can only be directly nested in external modules or ambient module declarations."
	},
	"2670": {
		"category": "Error",
		"code": 2670,
		"message": "Augmentations for the global scope should have 'declare' modifier unless they appear in already ambient context."
	},
	"2671": {
		"category": "Error",
		"code": 2671,
		"message": "Cannot augment module '{0}' because it resolves to a non-module entity."
	},
	"2672": {
		"category": "Error",
		"code": 2672,
		"message": "Cannot assign a '{0}' constructor type to a '{1}' constructor type."
	},
	"2673": {
		"category": "Error",
		"code": 2673,
		"message": "Constructor of class '{0}' is private and only accessible within the class declaration."
	},
	"2674": {
		"category": "Error",
		"code": 2674,
		"message": "Constructor of class '{0}' is protected and only accessible within the class declaration."
	},
	"2675": {
		"category": "Error",
		"code": 2675,
		"message": "Cannot extend a class '{0}'. Class constructor is marked as private."
	},
	"2676": {
		"category": "Error",
		"code": 2676,
		"message": "Accessors must both be abstract or non-abstract."
	},
	"2677": {
		"category": "Error",
		"code": 2677,
		"message": "A type predicate's type must be assignable to its parameter's type."
	},
	"2678": {
		"category": "Error",
		"code": 2678,
		"message": "Type '{0}' is not comparable to type '{1}'."
	},
	"2679": {
		"category": "Error",
		"code": 2679,
		"message": "A function that is called with the 'new' keyword cannot have a 'this' type that is 'void'."
	},
	"2680": {
		"category": "Error",
		"code": 2680,
		"message": "A '{0}' parameter must be the first parameter."
	},
	"2681": {
		"category": "Error",
		"code": 2681,
		"message": "A constructor cannot have a 'this' parameter."
	},
	"2682": {
		"category": "Error",
		"code": 2682,
		"message": "'get' and 'set' accessor must have the same 'this' type."
	},
	"2683": {
		"category": "Error",
		"code": 2683,
		"message": "'this' implicitly has type 'any' because it does not have a type annotation."
	},
	"2684": {
		"category": "Error",
		"code": 2684,
		"message": "The 'this' context of type '{0}' is not assignable to method's 'this' of type '{1}'."
	},
	"2685": {
		"category": "Error",
		"code": 2685,
		"message": "The 'this' types of each signature are incompatible."
	},
	"2686": {
		"category": "Error",
		"code": 2686,
		"message": "'{0}' refers to a UMD global, but the current file is a module. Consider adding an import instead."
	},
	"2687": {
		"category": "Error",
		"code": 2687,
		"message": "All declarations of '{0}' must have identical modifiers."
	},
	"2688": {
		"category": "Error",
		"code": 2688,
		"message": "Cannot find type definition file for '{0}'."
	},
	"2689": {
		"category": "Error",
		"code": 2689,
		"message": "Cannot extend an interface '{0}'. Did you mean 'implements'?"
	},
	"2691": {
		"category": "Error",
		"code": 2691,
		"message": "An import path cannot end with a '{0}' extension. Consider importing '{1}' instead."
	},
	"2692": {
		"category": "Error",
		"code": 2692,
		"message": "'{0}' is a primitive, but '{1}' is a wrapper object. Prefer using '{0}' when possible."
	},
	"2693": {
		"category": "Error",
		"code": 2693,
		"message": "'{0}' only refers to a type, but is being used as a value here."
	},
	"2694": {
		"category": "Error",
		"code": 2694,
		"message": "Namespace '{0}' has no exported member '{1}'."
	},
	"2695": {
		"category": "Error",
		"code": 2695,
		"reportsUnnecessary": true,
		"message": "Left side of comma operator is unused and has no side effects."
	},
	"2696": {
		"category": "Error",
		"code": 2696,
		"message": "The 'Object' type is assignable to very few other types. Did you mean to use the 'any' type instead?"
	},
	"2697": {
		"category": "Error",
		"code": 2697,
		"message": "An async function or method must return a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your `--lib` option."
	},
	"2698": {
		"category": "Error",
		"code": 2698,
		"message": "Spread types may only be created from object types."
	},
	"2699": {
		"category": "Error",
		"code": 2699,
		"message": "Static property '{0}' conflicts with built-in property 'Function.{0}' of constructor function '{1}'."
	},
	"2700": {
		"category": "Error",
		"code": 2700,
		"message": "Rest types may only be created from object types."
	},
	"2701": {
		"category": "Error",
		"code": 2701,
		"message": "The target of an object rest assignment must be a variable or a property access."
	},
	"2702": {
		"category": "Error",
		"code": 2702,
		"message": "'{0}' only refers to a type, but is being used as a namespace here."
	},
	"2703": {
		"category": "Error",
		"code": 2703,
		"message": "The operand of a 'delete' operator must be a property reference."
	},
	"2704": {
		"category": "Error",
		"code": 2704,
		"message": "The operand of a 'delete' operator cannot be a read-only property."
	},
	"2705": {
		"category": "Error",
		"code": 2705,
		"message": "An async function or method in ES5/ES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your `--lib` option."
	},
	"2706": {
		"category": "Error",
		"code": 2706,
		"message": "Required type parameters may not follow optional type parameters."
	},
	"2707": {
		"category": "Error",
		"code": 2707,
		"message": "Generic type '{0}' requires between {1} and {2} type arguments."
	},
	"2708": {
		"category": "Error",
		"code": 2708,
		"message": "Cannot use namespace '{0}' as a value."
	},
	"2709": {
		"category": "Error",
		"code": 2709,
		"message": "Cannot use namespace '{0}' as a type."
	},
	"2710": {
		"category": "Error",
		"code": 2710,
		"message": "'{0}' are specified twice. The attribute named '{0}' will be overwritten."
	},
	"2711": {
		"category": "Error",
		"code": 2711,
		"message": "A dynamic import call returns a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your `--lib` option."
	},
	"2712": {
		"category": "Error",
		"code": 2712,
		"message": "A dynamic import call in ES5/ES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your `--lib` option."
	},
	"2713": {
		"category": "Error",
		"code": 2713,
		"message": "Cannot access '{0}.{1}' because '{0}' is a type, but not a namespace. Did you mean to retrieve the type of the property '{1}' in '{0}' with '{0}[\"{1}\"]'?"
	},
	"2714": {
		"category": "Error",
		"code": 2714,
		"message": "The expression of an export assignment must be an identifier or qualified name in an ambient context."
	},
	"2715": {
		"category": "Error",
		"code": 2715,
		"message": "Abstract property '{0}' in class '{1}' cannot be accessed in the constructor."
	},
	"2716": {
		"category": "Error",
		"code": 2716,
		"message": "Type parameter '{0}' has a circular default."
	},
	"2717": {
		"category": "Error",
		"code": 2717,
		"message": "Subsequent property declarations must have the same type.  Property '{0}' must be of type '{1}', but here has type '{2}'."
	},
	"2718": {
		"category": "Error",
		"code": 2718,
		"message": "Duplicate property '{0}'."
	},
	"2719": {
		"category": "Error",
		"code": 2719,
		"message": "Type '{0}' is not assignable to type '{1}'. Two different types with this name exist, but they are unrelated."
	},
	"2720": {
		"category": "Error",
		"code": 2720,
		"message": "Class '{0}' incorrectly implements class '{1}'. Did you mean to extend '{1}' and inherit its members as a subclass?"
	},
	"2721": {
		"category": "Error",
		"code": 2721,
		"message": "Cannot invoke an object which is possibly 'null'."
	},
	"2722": {
		"category": "Error",
		"code": 2722,
		"message": "Cannot invoke an object which is possibly 'undefined'."
	},
	"2723": {
		"category": "Error",
		"code": 2723,
		"message": "Cannot invoke an object which is possibly 'null' or 'undefined'."
	},
	"2724": {
		"category": "Error",
		"code": 2724,
		"message": "Module '{0}' has no exported member '{1}'. Did you mean '{2}'?"
	},
	"2725": {
		"category": "Error",
		"code": 2725,
		"message": "Class name cannot be 'Object' when targeting ES5 with module {0}."
	},
	"2726": {
		"category": "Error",
		"code": 2726,
		"message": "Cannot find lib definition for '{0}'."
	},
	"2727": {
		"category": "Error",
		"code": 2727,
		"message": "Cannot find lib definition for '{0}'. Did you mean '{1}'?"
	},
	"2728": {
		"category": "Message",
		"code": 2728,
		"message": "'{0}' is declared here."
	},
	"2729": {
		"category": "Error",
		"code": 2729,
		"message": "Property '{0}' is used before its initialization."
	},
	"2730": {
		"category": "Error",
		"code": 2730,
		"message": "An arrow function cannot have a 'this' parameter."
	},
	"2731": {
		"category": "Error",
		"code": 2731,
		"message": "Implicit conversion of a 'symbol' to a 'string' will fail at runtime. Consider wrapping this expression in 'String(...)'."
	},
	"2732": {
		"category": "Error",
		"code": 2732,
		"message": "Cannot find module '{0}'. Consider using '--resolveJsonModule' to import module with '.json' extension"
	},
	"2733": {
		"category": "Error",
		"code": 2733,
		"message": "Property '{0}' was also declared here."
	},
	"2734": {
		"category": "Error",
		"code": 2734,
		"message": "Are you missing a semicolon?"
	},
	"2735": {
		"category": "Error",
		"code": 2735,
		"message": "Did you mean for '{0}' to be constrained to type 'new (...args: any[]) => {1}'?"
	},
	"2736": {
		"category": "Error",
		"code": 2736,
		"message": "Operator '{0}' cannot be applied to type '{1}'."
	},
	"2737": {
		"category": "Error",
		"code": 2737,
		"message": "BigInt literals are not available when targeting lower than ES2020."
	},
	"2738": {
		"category": "Message",
		"code": 2738,
		"message": "An outer value of 'this' is shadowed by this container."
	},
	"2739": {
		"category": "Error",
		"code": 2739,
		"message": "Type '{0}' is missing the following properties from type '{1}': {2}"
	},
	"2740": {
		"category": "Error",
		"code": 2740,
		"message": "Type '{0}' is missing the following properties from type '{1}': {2}, and {3} more."
	},
	"2741": {
		"category": "Error",
		"code": 2741,
		"message": "Property '{0}' is missing in type '{1}' but required in type '{2}'."
	},
	"2742": {
		"category": "Error",
		"code": 2742,
		"message": "The inferred type of '{0}' cannot be named without a reference to '{1}'. This is likely not portable. A type annotation is necessary."
	},
	"2743": {
		"category": "Error",
		"code": 2743,
		"message": "No overload expects {0} type arguments, but overloads do exist that expect either {1} or {2} type arguments."
	},
	"2744": {
		"category": "Error",
		"code": 2744,
		"message": "Type parameter defaults can only reference previously declared type parameters."
	},
	"2745": {
		"category": "Error",
		"code": 2745,
		"message": "This JSX tag's '{0}' prop expects type '{1}' which requires multiple children, but only a single child was provided."
	},
	"2746": {
		"category": "Error",
		"code": 2746,
		"message": "This JSX tag's '{0}' prop expects a single child of type '{1}', but multiple children were provided."
	},
	"2747": {
		"category": "Error",
		"code": 2747,
		"message": "'{0}' components don't accept text as child elements. Text in JSX has the type 'string', but the expected type of '{1}' is '{2}'."
	},
	"2748": {
		"category": "Error",
		"code": 2748,
		"message": "Cannot access ambient const enums when the '--isolatedModules' flag is provided."
	},
	"2749": {
		"category": "Error",
		"code": 2749,
		"message": "'{0}' refers to a value, but is being used as a type here."
	},
	"2750": {
		"category": "Error",
		"code": 2750,
		"message": "The implementation signature is declared here."
	},
	"2751": {
		"category": "Error",
		"code": 2751,
		"message": "Circularity originates in type at this location."
	},
	"2752": {
		"category": "Error",
		"code": 2752,
		"message": "The first export default is here."
	},
	"2753": {
		"category": "Error",
		"code": 2753,
		"message": "Another export default is here."
	},
	"2754": {
		"category": "Error",
		"code": 2754,
		"message": "'super' may not use type arguments."
	},
	"2755": {
		"category": "Error",
		"code": 2755,
		"message": "No constituent of type '{0}' is callable."
	},
	"2756": {
		"category": "Error",
		"code": 2756,
		"message": "Not all constituents of type '{0}' are callable."
	},
	"2757": {
		"category": "Error",
		"code": 2757,
		"message": "Type '{0}' has no call signatures."
	},
	"2758": {
		"category": "Error",
		"code": 2758,
		"message": "Each member of the union type '{0}' has signatures, but none of those signatures are compatible with each other."
	},
	"2759": {
		"category": "Error",
		"code": 2759,
		"message": "No constituent of type '{0}' is constructable."
	},
	"2760": {
		"category": "Error",
		"code": 2760,
		"message": "Not all constituents of type '{0}' are constructable."
	},
	"2761": {
		"category": "Error",
		"code": 2761,
		"message": "Type '{0}' has no construct signatures."
	},
	"2762": {
		"category": "Error",
		"code": 2762,
		"message": "Each member of the union type '{0}' has construct signatures, but none of those signatures are compatible with each other."
	},
	"2763": {
		"category": "Error",
		"code": 2763,
		"message": "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but for-of will always send '{0}'."
	},
	"2764": {
		"category": "Error",
		"code": 2764,
		"message": "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but array spread will always send '{0}'."
	},
	"2765": {
		"category": "Error",
		"code": 2765,
		"message": "Cannot iterate value because the 'next' method of its iterator expects type '{1}', but array destructuring will always send '{0}'."
	},
	"2766": {
		"category": "Error",
		"code": 2766,
		"message": "Cannot delegate iteration to value because the 'next' method of its iterator expects type '{1}', but the containing generator will always send '{0}'."
	},
	"2767": {
		"category": "Error",
		"code": 2767,
		"message": "The '{0}' property of an iterator must be a method."
	},
	"2768": {
		"category": "Error",
		"code": 2768,
		"message": "The '{0}' property of an async iterator must be a method."
	},
	"2769": {
		"category": "Error",
		"code": 2769,
		"message": "No overload matches this call."
	},
	"2770": {
		"category": "Error",
		"code": 2770,
		"message": "The last overload gave the following error."
	},
	"2771": {
		"category": "Error",
		"code": 2771,
		"message": "The last overload is declared here."
	},
	"2772": {
		"category": "Error",
		"code": 2772,
		"message": "Overload {0} of {1}, '{2}', gave the following error."
	},
	"2773": {
		"category": "Error",
		"code": 2773,
		"message": "Did you forget to use 'await'?"
	},
	"2774": {
		"category": "Error",
		"code": 2774,
		"message": "This condition will always return true since the function is always defined. Did you mean to call it instead?"
	},
	"2775": {
		"category": "Error",
		"code": 2775,
		"message": "Assertions require every name in the call target to be declared with an explicit type annotation."
	},
	"2776": {
		"category": "Error",
		"code": 2776,
		"message": "Assertions require the call target to be an identifier or qualified name."
	},
	"2777": {
		"category": "Error",
		"code": 2777,
		"message": "The operand of an increment or decrement operator may not be an optional property access."
	},
	"2778": {
		"category": "Error",
		"code": 2778,
		"message": "The target of an object rest assignment may not be an optional property access."
	},
	"2779": {
		"category": "Error",
		"code": 2779,
		"message": "The left-hand side of an assignment expression may not be an optional property access."
	},
	"2780": {
		"category": "Error",
		"code": 2780,
		"message": "The left-hand side of a 'for...in' statement may not be an optional property access."
	},
	"2781": {
		"category": "Error",
		"code": 2781,
		"message": "The left-hand side of a 'for...of' statement may not be an optional property access."
	},
	"2782": {
		"category": "Message",
		"code": 2782,
		"message": "'{0}' needs an explicit type annotation."
	},
	"2783": {
		"category": "Error",
		"code": 2783,
		"message": "'{0}' is specified more than once, so this usage will be overwritten."
	},
	"4000": {
		"category": "Error",
		"code": 4000,
		"message": "Import declaration '{0}' is using private name '{1}'."
	},
	"4002": {
		"category": "Error",
		"code": 4002,
		"message": "Type parameter '{0}' of exported class has or is using private name '{1}'."
	},
	"4004": {
		"category": "Error",
		"code": 4004,
		"message": "Type parameter '{0}' of exported interface has or is using private name '{1}'."
	},
	"4006": {
		"category": "Error",
		"code": 4006,
		"message": "Type parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'."
	},
	"4008": {
		"category": "Error",
		"code": 4008,
		"message": "Type parameter '{0}' of call signature from exported interface has or is using private name '{1}'."
	},
	"4010": {
		"category": "Error",
		"code": 4010,
		"message": "Type parameter '{0}' of public static method from exported class has or is using private name '{1}'."
	},
	"4012": {
		"category": "Error",
		"code": 4012,
		"message": "Type parameter '{0}' of public method from exported class has or is using private name '{1}'."
	},
	"4014": {
		"category": "Error",
		"code": 4014,
		"message": "Type parameter '{0}' of method from exported interface has or is using private name '{1}'."
	},
	"4016": {
		"category": "Error",
		"code": 4016,
		"message": "Type parameter '{0}' of exported function has or is using private name '{1}'."
	},
	"4019": {
		"category": "Error",
		"code": 4019,
		"message": "Implements clause of exported class '{0}' has or is using private name '{1}'."
	},
	"4020": {
		"category": "Error",
		"code": 4020,
		"message": "'extends' clause of exported class '{0}' has or is using private name '{1}'."
	},
	"4022": {
		"category": "Error",
		"code": 4022,
		"message": "'extends' clause of exported interface '{0}' has or is using private name '{1}'."
	},
	"4023": {
		"category": "Error",
		"code": 4023,
		"message": "Exported variable '{0}' has or is using name '{1}' from external module {2} but cannot be named."
	},
	"4024": {
		"category": "Error",
		"code": 4024,
		"message": "Exported variable '{0}' has or is using name '{1}' from private module '{2}'."
	},
	"4025": {
		"category": "Error",
		"code": 4025,
		"message": "Exported variable '{0}' has or is using private name '{1}'."
	},
	"4026": {
		"category": "Error",
		"code": 4026,
		"message": "Public static property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named."
	},
	"4027": {
		"category": "Error",
		"code": 4027,
		"message": "Public static property '{0}' of exported class has or is using name '{1}' from private module '{2}'."
	},
	"4028": {
		"category": "Error",
		"code": 4028,
		"message": "Public static property '{0}' of exported class has or is using private name '{1}'."
	},
	"4029": {
		"category": "Error",
		"code": 4029,
		"message": "Public property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named."
	},
	"4030": {
		"category": "Error",
		"code": 4030,
		"message": "Public property '{0}' of exported class has or is using name '{1}' from private module '{2}'."
	},
	"4031": {
		"category": "Error",
		"code": 4031,
		"message": "Public property '{0}' of exported class has or is using private name '{1}'."
	},
	"4032": {
		"category": "Error",
		"code": 4032,
		"message": "Property '{0}' of exported interface has or is using name '{1}' from private module '{2}'."
	},
	"4033": {
		"category": "Error",
		"code": 4033,
		"message": "Property '{0}' of exported interface has or is using private name '{1}'."
	},
	"4034": {
		"category": "Error",
		"code": 4034,
		"message": "Parameter type of public static setter '{0}' from exported class has or is using name '{1}' from private module '{2}'."
	},
	"4035": {
		"category": "Error",
		"code": 4035,
		"message": "Parameter type of public static setter '{0}' from exported class has or is using private name '{1}'."
	},
	"4036": {
		"category": "Error",
		"code": 4036,
		"message": "Parameter type of public setter '{0}' from exported class has or is using name '{1}' from private module '{2}'."
	},
	"4037": {
		"category": "Error",
		"code": 4037,
		"message": "Parameter type of public setter '{0}' from exported class has or is using private name '{1}'."
	},
	"4038": {
		"category": "Error",
		"code": 4038,
		"message": "Return type of public static getter '{0}' from exported class has or is using name '{1}' from external module {2} but cannot be named."
	},
	"4039": {
		"category": "Error",
		"code": 4039,
		"message": "Return type of public static getter '{0}' from exported class has or is using name '{1}' from private module '{2}'."
	},
	"4040": {
		"category": "Error",
		"code": 4040,
		"message": "Return type of public static getter '{0}' from exported class has or is using private name '{1}'."
	},
	"4041": {
		"category": "Error",
		"code": 4041,
		"message": "Return type of public getter '{0}' from exported class has or is using name '{1}' from external module {2} but cannot be named."
	},
	"4042": {
		"category": "Error",
		"code": 4042,
		"message": "Return type of public getter '{0}' from exported class has or is using name '{1}' from private module '{2}'."
	},
	"4043": {
		"category": "Error",
		"code": 4043,
		"message": "Return type of public getter '{0}' from exported class has or is using private name '{1}'."
	},
	"4044": {
		"category": "Error",
		"code": 4044,
		"message": "Return type of constructor signature from exported interface has or is using name '{0}' from private module '{1}'."
	},
	"4045": {
		"category": "Error",
		"code": 4045,
		"message": "Return type of constructor signature from exported interface has or is using private name '{0}'."
	},
	"4046": {
		"category": "Error",
		"code": 4046,
		"message": "Return type of call signature from exported interface has or is using name '{0}' from private module '{1}'."
	},
	"4047": {
		"category": "Error",
		"code": 4047,
		"message": "Return type of call signature from exported interface has or is using private name '{0}'."
	},
	"4048": {
		"category": "Error",
		"code": 4048,
		"message": "Return type of index signature from exported interface has or is using name '{0}' from private module '{1}'."
	},
	"4049": {
		"category": "Error",
		"code": 4049,
		"message": "Return type of index signature from exported interface has or is using private name '{0}'."
	},
	"4050": {
		"category": "Error",
		"code": 4050,
		"message": "Return type of public static method from exported class has or is using name '{0}' from external module {1} but cannot be named."
	},
	"4051": {
		"category": "Error",
		"code": 4051,
		"message": "Return type of public static method from exported class has or is using name '{0}' from private module '{1}'."
	},
	"4052": {
		"category": "Error",
		"code": 4052,
		"message": "Return type of public static method from exported class has or is using private name '{0}'."
	},
	"4053": {
		"category": "Error",
		"code": 4053,
		"message": "Return type of public method from exported class has or is using name '{0}' from external module {1} but cannot be named."
	},
	"4054": {
		"category": "Error",
		"code": 4054,
		"message": "Return type of public method from exported class has or is using name '{0}' from private module '{1}'."
	},
	"4055": {
		"category": "Error",
		"code": 4055,
		"message": "Return type of public method from exported class has or is using private name '{0}'."
	},
	"4056": {
		"category": "Error",
		"code": 4056,
		"message": "Return type of method from exported interface has or is using name '{0}' from private module '{1}'."
	},
	"4057": {
		"category": "Error",
		"code": 4057,
		"message": "Return type of method from exported interface has or is using private name '{0}'."
	},
	"4058": {
		"category": "Error",
		"code": 4058,
		"message": "Return type of exported function has or is using name '{0}' from external module {1} but cannot be named."
	},
	"4059": {
		"category": "Error",
		"code": 4059,
		"message": "Return type of exported function has or is using name '{0}' from private module '{1}'."
	},
	"4060": {
		"category": "Error",
		"code": 4060,
		"message": "Return type of exported function has or is using private name '{0}'."
	},
	"4061": {
		"category": "Error",
		"code": 4061,
		"message": "Parameter '{0}' of constructor from exported class has or is using name '{1}' from external module {2} but cannot be named."
	},
	"4062": {
		"category": "Error",
		"code": 4062,
		"message": "Parameter '{0}' of constructor from exported class has or is using name '{1}' from private module '{2}'."
	},
	"4063": {
		"category": "Error",
		"code": 4063,
		"message": "Parameter '{0}' of constructor from exported class has or is using private name '{1}'."
	},
	"4064": {
		"category": "Error",
		"code": 4064,
		"message": "Parameter '{0}' of constructor signature from exported interface has or is using name '{1}' from private module '{2}'."
	},
	"4065": {
		"category": "Error",
		"code": 4065,
		"message": "Parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'."
	},
	"4066": {
		"category": "Error",
		"code": 4066,
		"message": "Parameter '{0}' of call signature from exported interface has or is using name '{1}' from private module '{2}'."
	},
	"4067": {
		"category": "Error",
		"code": 4067,
		"message": "Parameter '{0}' of call signature from exported interface has or is using private name '{1}'."
	},
	"4068": {
		"category": "Error",
		"code": 4068,
		"message": "Parameter '{0}' of public static method from exported class has or is using name '{1}' from external module {2} but cannot be named."
	},
	"4069": {
		"category": "Error",
		"code": 4069,
		"message": "Parameter '{0}' of public static method from exported class has or is using name '{1}' from private module '{2}'."
	},
	"4070": {
		"category": "Error",
		"code": 4070,
		"message": "Parameter '{0}' of public static method from exported class has or is using private name '{1}'."
	},
	"4071": {
		"category": "Error",
		"code": 4071,
		"message": "Parameter '{0}' of public method from exported class has or is using name '{1}' from external module {2} but cannot be named."
	},
	"4072": {
		"category": "Error",
		"code": 4072,
		"message": "Parameter '{0}' of public method from exported class has or is using name '{1}' from private module '{2}'."
	},
	"4073": {
		"category": "Error",
		"code": 4073,
		"message": "Parameter '{0}' of public method from exported class has or is using private name '{1}'."
	},
	"4074": {
		"category": "Error",
		"code": 4074,
		"message": "Parameter '{0}' of method from exported interface has or is using name '{1}' from private module '{2}'."
	},
	"4075": {
		"category": "Error",
		"code": 4075,
		"message": "Parameter '{0}' of method from exported interface has or is using private name '{1}'."
	},
	"4076": {
		"category": "Error",
		"code": 4076,
		"message": "Parameter '{0}' of exported function has or is using name '{1}' from external module {2} but cannot be named."
	},
	"4077": {
		"category": "Error",
		"code": 4077,
		"message": "Parameter '{0}' of exported function has or is using name '{1}' from private module '{2}'."
	},
	"4078": {
		"category": "Error",
		"code": 4078,
		"message": "Parameter '{0}' of exported function has or is using private name '{1}'."
	},
	"4081": {
		"category": "Error",
		"code": 4081,
		"message": "Exported type alias '{0}' has or is using private name '{1}'."
	},
	"4082": {
		"category": "Error",
		"code": 4082,
		"message": "Default export of the module has or is using private name '{0}'."
	},
	"4083": {
		"category": "Error",
		"code": 4083,
		"message": "Type parameter '{0}' of exported type alias has or is using private name '{1}'."
	},
	"4090": {
		"category": "Error",
		"code": 4090,
		"message": "Conflicting definitions for '{0}' found at '{1}' and '{2}'. Consider installing a specific version of this library to resolve the conflict."
	},
	"4091": {
		"category": "Error",
		"code": 4091,
		"message": "Parameter '{0}' of index signature from exported interface has or is using name '{1}' from private module '{2}'."
	},
	"4092": {
		"category": "Error",
		"code": 4092,
		"message": "Parameter '{0}' of index signature from exported interface has or is using private name '{1}'."
	},
	"4094": {
		"category": "Error",
		"code": 4094,
		"message": "Property '{0}' of exported class expression may not be private or protected."
	},
	"4095": {
		"category": "Error",
		"code": 4095,
		"message": "Public static method '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named."
	},
	"4096": {
		"category": "Error",
		"code": 4096,
		"message": "Public static method '{0}' of exported class has or is using name '{1}' from private module '{2}'."
	},
	"4097": {
		"category": "Error",
		"code": 4097,
		"message": "Public static method '{0}' of exported class has or is using private name '{1}'."
	},
	"4098": {
		"category": "Error",
		"code": 4098,
		"message": "Public method '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named."
	},
	"4099": {
		"category": "Error",
		"code": 4099,
		"message": "Public method '{0}' of exported class has or is using name '{1}' from private module '{2}'."
	},
	"4100": {
		"category": "Error",
		"code": 4100,
		"message": "Public method '{0}' of exported class has or is using private name '{1}'."
	},
	"4101": {
		"category": "Error",
		"code": 4101,
		"message": "Method '{0}' of exported interface has or is using name '{1}' from private module '{2}'."
	},
	"4102": {
		"category": "Error",
		"code": 4102,
		"message": "Method '{0}' of exported interface has or is using private name '{1}'."
	},
	"4103": {
		"category": "Error",
		"code": 4103,
		"message": "Type parameter '{0}' of exported mapped object type is using private name '{1}'."
	},
	"4104": {
		"category": "Error",
		"code": 4104,
		"message": "The type '{0}' is 'readonly' and cannot be assigned to the mutable type '{1}'."
	},
	"4105": {
		"category": "Error",
		"code": 4105,
		"message": "Private or protected member '{0}' cannot be accessed on a type parameter."
	},
	"4106": {
		"category": "Error",
		"code": 4106,
		"message": "Parameter '{0}' of accessor has or is using private name '{1}'."
	},
	"4107": {
		"category": "Error",
		"code": 4107,
		"message": "Parameter '{0}' of accessor has or is using name '{1}' from private module '{2}'."
	},
	"4108": {
		"category": "Error",
		"code": 4108,
		"message": "Parameter '{0}' of accessor has or is using name '{1}' from external module '{2}' but cannot be named."
	},
	"4109": {
		"category": "Error",
		"code": 4109,
		"message": "Type arguments for '{0}' circularly reference themselves."
	},
	"4110": {
		"category": "Error",
		"code": 4110,
		"message": "Tuple type arguments circularly reference themselves."
	},
	"5001": {
		"category": "Error",
		"code": 5001,
		"message": "The current host does not support the '{0}' option."
	},
	"5009": {
		"category": "Error",
		"code": 5009,
		"message": "Cannot find the common subdirectory path for the input files."
	},
	"5010": {
		"category": "Error",
		"code": 5010,
		"message": "File specification cannot end in a recursive directory wildcard ('**'): '{0}'."
	},
	"5012": {
		"category": "Error",
		"code": 5012,
		"message": "Cannot read file '{0}': {1}."
	},
	"5014": {
		"category": "Error",
		"code": 5014,
		"message": "Failed to parse file '{0}': {1}."
	},
	"5023": {
		"category": "Error",
		"code": 5023,
		"message": "Unknown compiler option '{0}'."
	},
	"5024": {
		"category": "Error",
		"code": 5024,
		"message": "Compiler option '{0}' requires a value of type {1}."
	},
	"5025": {
		"category": "Error",
		"code": 5025,
		"message": "Unknown compiler option '{0}'. Did you mean '{1}'?"
	},
	"5033": {
		"category": "Error",
		"code": 5033,
		"message": "Could not write file '{0}': {1}."
	},
	"5042": {
		"category": "Error",
		"code": 5042,
		"message": "Option 'project' cannot be mixed with source files on a command line."
	},
	"5047": {
		"category": "Error",
		"code": 5047,
		"message": "Option 'isolatedModules' can only be used when either option '--module' is provided or option 'target' is 'ES2015' or higher."
	},
	"5048": {
		"category": "Error",
		"code": 5048,
		"message": "Option '{0}' cannot be specified when option 'target' is 'ES3'."
	},
	"5051": {
		"category": "Error",
		"code": 5051,
		"message": "Option '{0} can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided."
	},
	"5052": {
		"category": "Error",
		"code": 5052,
		"message": "Option '{0}' cannot be specified without specifying option '{1}'."
	},
	"5053": {
		"category": "Error",
		"code": 5053,
		"message": "Option '{0}' cannot be specified with option '{1}'."
	},
	"5054": {
		"category": "Error",
		"code": 5054,
		"message": "A 'tsconfig.json' file is already defined at: '{0}'."
	},
	"5055": {
		"category": "Error",
		"code": 5055,
		"message": "Cannot write file '{0}' because it would overwrite input file."
	},
	"5056": {
		"category": "Error",
		"code": 5056,
		"message": "Cannot write file '{0}' because it would be overwritten by multiple input files."
	},
	"5057": {
		"category": "Error",
		"code": 5057,
		"message": "Cannot find a tsconfig.json file at the specified directory: '{0}'."
	},
	"5058": {
		"category": "Error",
		"code": 5058,
		"message": "The specified path does not exist: '{0}'."
	},
	"5059": {
		"category": "Error",
		"code": 5059,
		"message": "Invalid value for '--reactNamespace'. '{0}' is not a valid identifier."
	},
	"5060": {
		"category": "Error",
		"code": 5060,
		"message": "Option 'paths' cannot be used without specifying '--baseUrl' option."
	},
	"5061": {
		"category": "Error",
		"code": 5061,
		"message": "Pattern '{0}' can have at most one '*' character."
	},
	"5062": {
		"category": "Error",
		"code": 5062,
		"message": "Substitution '{0}' in pattern '{1}' can have at most one '*' character."
	},
	"5063": {
		"category": "Error",
		"code": 5063,
		"message": "Substitutions for pattern '{0}' should be an array."
	},
	"5064": {
		"category": "Error",
		"code": 5064,
		"message": "Substitution '{0}' for pattern '{1}' has incorrect type, expected 'string', got '{2}'."
	},
	"5065": {
		"category": "Error",
		"code": 5065,
		"message": "File specification cannot contain a parent directory ('..') that appears after a recursive directory wildcard ('**'): '{0}'."
	},
	"5066": {
		"category": "Error",
		"code": 5066,
		"message": "Substitutions for pattern '{0}' shouldn't be an empty array."
	},
	"5067": {
		"category": "Error",
		"code": 5067,
		"message": "Invalid value for 'jsxFactory'. '{0}' is not a valid identifier or qualified-name."
	},
	"5068": {
		"category": "Error",
		"code": 5068,
		"message": "Adding a tsconfig.json file will help organize projects that contain both TypeScript and JavaScript files. Learn more at https://aka.ms/tsconfig."
	},
	"5069": {
		"category": "Error",
		"code": 5069,
		"message": "Option '{0}' cannot be specified without specifying option '{1}' or option '{2}'."
	},
	"5070": {
		"category": "Error",
		"code": 5070,
		"message": "Option '--resolveJsonModule' cannot be specified without 'node' module resolution strategy."
	},
	"5071": {
		"category": "Error",
		"code": 5071,
		"message": "Option '--resolveJsonModule' can only be specified when module code generation is 'commonjs', 'amd', 'es2015' or 'esNext'."
	},
	"5072": {
		"category": "Error",
		"code": 5072,
		"message": "Unknown build option '{0}'."
	},
	"5073": {
		"category": "Error",
		"code": 5073,
		"message": "Build option '{0}' requires a value of type {1}."
	},
	"5074": {
		"category": "Error",
		"code": 5074,
		"message": "Option '--incremental' can only be specified using tsconfig, emitting to single file or when option `--tsBuildInfoFile` is specified."
	},
	"5075": {
		"category": "Error",
		"code": 5075,
		"message": "'{0}' is assignable to the constraint of type '{1}', but '{1}' could be instantiated with a different subtype of constraint '{2}'."
	},
	"5076": {
		"category": "Error",
		"code": 5076,
		"message": "'{0}' and '{1}' operations cannot be mixed without parentheses."
	},
	"5077": {
		"category": "Error",
		"code": 5077,
		"message": "Unknown build option '{0}'. Did you mean '{1}'?"
	},
	"5078": {
		"category": "Error",
		"code": 5078,
		"message": "Unknown watch option '{0}'."
	},
	"5079": {
		"category": "Error",
		"code": 5079,
		"message": "Unknown watch option '{0}'. Did you mean '{1}'?"
	},
	"5080": {
		"category": "Error",
		"code": 5080,
		"message": "Watch option '{0}' requires a value of type {1}."
	},
	"5081": {
		"category": "Error",
		"code": 5081,
		"message": "Cannot find a tsconfig.json file at the current directory: {0}."
	},
	"6000": {
		"category": "Message",
		"code": 6000,
		"message": "Generates a sourcemap for each corresponding '.d.ts' file."
	},
	"6001": {
		"category": "Message",
		"code": 6001,
		"message": "Concatenate and emit output to single file."
	},
	"6002": {
		"category": "Message",
		"code": 6002,
		"message": "Generates corresponding '.d.ts' file."
	},
	"6003": {
		"category": "Message",
		"code": 6003,
		"message": "Specify the location where debugger should locate map files instead of generated locations."
	},
	"6004": {
		"category": "Message",
		"code": 6004,
		"message": "Specify the location where debugger should locate TypeScript files instead of source locations."
	},
	"6005": {
		"category": "Message",
		"code": 6005,
		"message": "Watch input files."
	},
	"6006": {
		"category": "Message",
		"code": 6006,
		"message": "Redirect output structure to the directory."
	},
	"6007": {
		"category": "Message",
		"code": 6007,
		"message": "Do not erase const enum declarations in generated code."
	},
	"6008": {
		"category": "Message",
		"code": 6008,
		"message": "Do not emit outputs if any errors were reported."
	},
	"6009": {
		"category": "Message",
		"code": 6009,
		"message": "Do not emit comments to output."
	},
	"6010": {
		"category": "Message",
		"code": 6010,
		"message": "Do not emit outputs."
	},
	"6011": {
		"category": "Message",
		"code": 6011,
		"message": "Allow default imports from modules with no default export. This does not affect code emit, just typechecking."
	},
	"6012": {
		"category": "Message",
		"code": 6012,
		"message": "Skip type checking of declaration files."
	},
	"6013": {
		"category": "Message",
		"code": 6013,
		"message": "Do not resolve the real path of symlinks."
	},
	"6014": {
		"category": "Message",
		"code": 6014,
		"message": "Only emit '.d.ts' declaration files."
	},
	"6015": {
		"category": "Message",
		"code": 6015,
		"message": "Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'."
	},
	"6016": {
		"category": "Message",
		"code": 6016,
		"message": "Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'."
	},
	"6017": {
		"category": "Message",
		"code": 6017,
		"message": "Print this message."
	},
	"6019": {
		"category": "Message",
		"code": 6019,
		"message": "Print the compiler's version."
	},
	"6020": {
		"category": "Message",
		"code": 6020,
		"message": "Compile the project given the path to its configuration file, or to a folder with a 'tsconfig.json'."
	},
	"6023": {
		"category": "Message",
		"code": 6023,
		"message": "Syntax: {0}"
	},
	"6024": {
		"category": "Message",
		"code": 6024,
		"message": "options"
	},
	"6025": {
		"category": "Message",
		"code": 6025,
		"message": "file"
	},
	"6026": {
		"category": "Message",
		"code": 6026,
		"message": "Examples: {0}"
	},
	"6027": {
		"category": "Message",
		"code": 6027,
		"message": "Options:"
	},
	"6029": {
		"category": "Message",
		"code": 6029,
		"message": "Version {0}"
	},
	"6030": {
		"category": "Message",
		"code": 6030,
		"message": "Insert command line options and files from a file."
	},
	"6031": {
		"category": "Message",
		"code": 6031,
		"message": "Starting compilation in watch mode..."
	},
	"6032": {
		"category": "Message",
		"code": 6032,
		"message": "File change detected. Starting incremental compilation..."
	},
	"6034": {
		"category": "Message",
		"code": 6034,
		"message": "KIND"
	},
	"6035": {
		"category": "Message",
		"code": 6035,
		"message": "FILE"
	},
	"6036": {
		"category": "Message",
		"code": 6036,
		"message": "VERSION"
	},
	"6037": {
		"category": "Message",
		"code": 6037,
		"message": "LOCATION"
	},
	"6038": {
		"category": "Message",
		"code": 6038,
		"message": "DIRECTORY"
	},
	"6039": {
		"category": "Message",
		"code": 6039,
		"message": "STRATEGY"
	},
	"6040": {
		"category": "Message",
		"code": 6040,
		"message": "FILE OR DIRECTORY"
	},
	"6043": {
		"category": "Message",
		"code": 6043,
		"message": "Generates corresponding '.map' file."
	},
	"6044": {
		"category": "Error",
		"code": 6044,
		"message": "Compiler option '{0}' expects an argument."
	},
	"6045": {
		"category": "Error",
		"code": 6045,
		"message": "Unterminated quoted string in response file '{0}'."
	},
	"6046": {
		"category": "Error",
		"code": 6046,
		"message": "Argument for '{0}' option must be: {1}."
	},
	"6048": {
		"category": "Error",
		"code": 6048,
		"message": "Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'."
	},
	"6049": {
		"category": "Error",
		"code": 6049,
		"message": "Unsupported locale '{0}'."
	},
	"6050": {
		"category": "Error",
		"code": 6050,
		"message": "Unable to open file '{0}'."
	},
	"6051": {
		"category": "Error",
		"code": 6051,
		"message": "Corrupted locale file {0}."
	},
	"6052": {
		"category": "Message",
		"code": 6052,
		"message": "Raise error on expressions and declarations with an implied 'any' type."
	},
	"6053": {
		"category": "Error",
		"code": 6053,
		"message": "File '{0}' not found."
	},
	"6054": {
		"category": "Error",
		"code": 6054,
		"message": "File '{0}' has an unsupported extension. The only supported extensions are {1}."
	},
	"6055": {
		"category": "Message",
		"code": 6055,
		"message": "Suppress noImplicitAny errors for indexing objects lacking index signatures."
	},
	"6056": {
		"category": "Message",
		"code": 6056,
		"message": "Do not emit declarations for code that has an '@internal' annotation."
	},
	"6058": {
		"category": "Message",
		"code": 6058,
		"message": "Specify the root directory of input files. Use to control the output directory structure with --outDir."
	},
	"6059": {
		"category": "Error",
		"code": 6059,
		"message": "File '{0}' is not under 'rootDir' '{1}'. 'rootDir' is expected to contain all source files."
	},
	"6060": {
		"category": "Message",
		"code": 6060,
		"message": "Specify the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix)."
	},
	"6061": {
		"category": "Message",
		"code": 6061,
		"message": "NEWLINE"
	},
	"6064": {
		"category": "Error",
		"code": 6064,
		"message": "Option '{0}' can only be specified in 'tsconfig.json' file."
	},
	"6065": {
		"category": "Message",
		"code": 6065,
		"message": "Enables experimental support for ES7 decorators."
	},
	"6066": {
		"category": "Message",
		"code": 6066,
		"message": "Enables experimental support for emitting type metadata for decorators."
	},
	"6068": {
		"category": "Message",
		"code": 6068,
		"message": "Enables experimental support for ES7 async functions."
	},
	"6069": {
		"category": "Message",
		"code": 6069,
		"message": "Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6)."
	},
	"6070": {
		"category": "Message",
		"code": 6070,
		"message": "Initializes a TypeScript project and creates a tsconfig.json file."
	},
	"6071": {
		"category": "Message",
		"code": 6071,
		"message": "Successfully created a tsconfig.json file."
	},
	"6072": {
		"category": "Message",
		"code": 6072,
		"message": "Suppress excess property checks for object literals."
	},
	"6073": {
		"category": "Message",
		"code": 6073,
		"message": "Stylize errors and messages using color and context (experimental)."
	},
	"6074": {
		"category": "Message",
		"code": 6074,
		"message": "Do not report errors on unused labels."
	},
	"6075": {
		"category": "Message",
		"code": 6075,
		"message": "Report error when not all code paths in function return a value."
	},
	"6076": {
		"category": "Message",
		"code": 6076,
		"message": "Report errors for fallthrough cases in switch statement."
	},
	"6077": {
		"category": "Message",
		"code": 6077,
		"message": "Do not report errors on unreachable code."
	},
	"6078": {
		"category": "Message",
		"code": 6078,
		"message": "Disallow inconsistently-cased references to the same file."
	},
	"6079": {
		"category": "Message",
		"code": 6079,
		"message": "Specify library files to be included in the compilation."
	},
	"6080": {
		"category": "Message",
		"code": 6080,
		"message": "Specify JSX code generation: 'preserve', 'react-native', or 'react'."
	},
	"6081": {
		"category": "Message",
		"code": 6081,
		"message": "File '{0}' has an unsupported extension, so skipping it."
	},
	"6082": {
		"category": "Error",
		"code": 6082,
		"message": "Only 'amd' and 'system' modules are supported alongside --{0}."
	},
	"6083": {
		"category": "Message",
		"code": 6083,
		"message": "Base directory to resolve non-absolute module names."
	},
	"6084": {
		"category": "Message",
		"code": 6084,
		"message": "[Deprecated] Use '--jsxFactory' instead. Specify the object invoked for createElement when targeting 'react' JSX emit"
	},
	"6085": {
		"category": "Message",
		"code": 6085,
		"message": "Enable tracing of the name resolution process."
	},
	"6086": {
		"category": "Message",
		"code": 6086,
		"message": "======== Resolving module '{0}' from '{1}'. ========"
	},
	"6087": {
		"category": "Message",
		"code": 6087,
		"message": "Explicitly specified module resolution kind: '{0}'."
	},
	"6088": {
		"category": "Message",
		"code": 6088,
		"message": "Module resolution kind is not specified, using '{0}'."
	},
	"6089": {
		"category": "Message",
		"code": 6089,
		"message": "======== Module name '{0}' was successfully resolved to '{1}'. ========"
	},
	"6090": {
		"category": "Message",
		"code": 6090,
		"message": "======== Module name '{0}' was not resolved. ========"
	},
	"6091": {
		"category": "Message",
		"code": 6091,
		"message": "'paths' option is specified, looking for a pattern to match module name '{0}'."
	},
	"6092": {
		"category": "Message",
		"code": 6092,
		"message": "Module name '{0}', matched pattern '{1}'."
	},
	"6093": {
		"category": "Message",
		"code": 6093,
		"message": "Trying substitution '{0}', candidate module location: '{1}'."
	},
	"6094": {
		"category": "Message",
		"code": 6094,
		"message": "Resolving module name '{0}' relative to base url '{1}' - '{2}'."
	},
	"6095": {
		"category": "Message",
		"code": 6095,
		"message": "Loading module as file / folder, candidate module location '{0}', target file type '{1}'."
	},
	"6096": {
		"category": "Message",
		"code": 6096,
		"message": "File '{0}' does not exist."
	},
	"6097": {
		"category": "Message",
		"code": 6097,
		"message": "File '{0}' exist - use it as a name resolution result."
	},
	"6098": {
		"category": "Message",
		"code": 6098,
		"message": "Loading module '{0}' from 'node_modules' folder, target file type '{1}'."
	},
	"6099": {
		"category": "Message",
		"code": 6099,
		"message": "Found 'package.json' at '{0}'."
	},
	"6100": {
		"category": "Message",
		"code": 6100,
		"message": "'package.json' does not have a '{0}' field."
	},
	"6101": {
		"category": "Message",
		"code": 6101,
		"message": "'package.json' has '{0}' field '{1}' that references '{2}'."
	},
	"6102": {
		"category": "Message",
		"code": 6102,
		"message": "Allow javascript files to be compiled."
	},
	"6103": {
		"category": "Error",
		"code": 6103,
		"message": "Option '{0}' should have array of strings as a value."
	},
	"6104": {
		"category": "Message",
		"code": 6104,
		"message": "Checking if '{0}' is the longest matching prefix for '{1}' - '{2}'."
	},
	"6105": {
		"category": "Message",
		"code": 6105,
		"message": "Expected type of '{0}' field in 'package.json' to be '{1}', got '{2}'."
	},
	"6106": {
		"category": "Message",
		"code": 6106,
		"message": "'baseUrl' option is set to '{0}', using this value to resolve non-relative module name '{1}'."
	},
	"6107": {
		"category": "Message",
		"code": 6107,
		"message": "'rootDirs' option is set, using it to resolve relative module name '{0}'."
	},
	"6108": {
		"category": "Message",
		"code": 6108,
		"message": "Longest matching prefix for '{0}' is '{1}'."
	},
	"6109": {
		"category": "Message",
		"code": 6109,
		"message": "Loading '{0}' from the root dir '{1}', candidate location '{2}'."
	},
	"6110": {
		"category": "Message",
		"code": 6110,
		"message": "Trying other entries in 'rootDirs'."
	},
	"6111": {
		"category": "Message",
		"code": 6111,
		"message": "Module resolution using 'rootDirs' has failed."
	},
	"6112": {
		"category": "Message",
		"code": 6112,
		"message": "Do not emit 'use strict' directives in module output."
	},
	"6113": {
		"category": "Message",
		"code": 6113,
		"message": "Enable strict null checks."
	},
	"6114": {
		"category": "Error",
		"code": 6114,
		"message": "Unknown option 'excludes'. Did you mean 'exclude'?"
	},
	"6115": {
		"category": "Message",
		"code": 6115,
		"message": "Raise error on 'this' expressions with an implied 'any' type."
	},
	"6116": {
		"category": "Message",
		"code": 6116,
		"message": "======== Resolving type reference directive '{0}', containing file '{1}', root directory '{2}'. ========"
	},
	"6117": {
		"category": "Message",
		"code": 6117,
		"message": "Resolving using primary search paths..."
	},
	"6118": {
		"category": "Message",
		"code": 6118,
		"message": "Resolving from node_modules folder..."
	},
	"6119": {
		"category": "Message",
		"code": 6119,
		"message": "======== Type reference directive '{0}' was successfully resolved to '{1}', primary: {2}. ========"
	},
	"6120": {
		"category": "Message",
		"code": 6120,
		"message": "======== Type reference directive '{0}' was not resolved. ========"
	},
	"6121": {
		"category": "Message",
		"code": 6121,
		"message": "Resolving with primary search path '{0}'."
	},
	"6122": {
		"category": "Message",
		"code": 6122,
		"message": "Root directory cannot be determined, skipping primary search paths."
	},
	"6123": {
		"category": "Message",
		"code": 6123,
		"message": "======== Resolving type reference directive '{0}', containing file '{1}', root directory not set. ========"
	},
	"6124": {
		"category": "Message",
		"code": 6124,
		"message": "Type declaration files to be included in compilation."
	},
	"6125": {
		"category": "Message",
		"code": 6125,
		"message": "Looking up in 'node_modules' folder, initial location '{0}'."
	},
	"6126": {
		"category": "Message",
		"code": 6126,
		"message": "Containing file is not specified and root directory cannot be determined, skipping lookup in 'node_modules' folder."
	},
	"6127": {
		"category": "Message",
		"code": 6127,
		"message": "======== Resolving type reference directive '{0}', containing file not set, root directory '{1}'. ========"
	},
	"6128": {
		"category": "Message",
		"code": 6128,
		"message": "======== Resolving type reference directive '{0}', containing file not set, root directory not set. ========"
	},
	"6130": {
		"category": "Message",
		"code": 6130,
		"message": "Resolving real path for '{0}', result '{1}'."
	},
	"6131": {
		"category": "Error",
		"code": 6131,
		"message": "Cannot compile modules using option '{0}' unless the '--module' flag is 'amd' or 'system'."
	},
	"6132": {
		"category": "Message",
		"code": 6132,
		"message": "File name '{0}' has a '{1}' extension - stripping it."
	},
	"6133": {
		"category": "Error",
		"code": 6133,
		"reportsUnnecessary": true,
		"message": "'{0}' is declared but its value is never read."
	},
	"6134": {
		"category": "Message",
		"code": 6134,
		"message": "Report errors on unused locals."
	},
	"6135": {
		"category": "Message",
		"code": 6135,
		"message": "Report errors on unused parameters."
	},
	"6136": {
		"category": "Message",
		"code": 6136,
		"message": "The maximum dependency depth to search under node_modules and load JavaScript files."
	},
	"6137": {
		"category": "Error",
		"code": 6137,
		"message": "Cannot import type declaration files. Consider importing '{0}' instead of '{1}'."
	},
	"6138": {
		"category": "Error",
		"code": 6138,
		"reportsUnnecessary": true,
		"message": "Property '{0}' is declared but its value is never read."
	},
	"6139": {
		"category": "Message",
		"code": 6139,
		"message": "Import emit helpers from 'tslib'."
	},
	"6140": {
		"category": "Error",
		"code": 6140,
		"message": "Auto discovery for typings is enabled in project '{0}'. Running extra resolution pass for module '{1}' using cache location '{2}'."
	},
	"6141": {
		"category": "Message",
		"code": 6141,
		"message": "Parse in strict mode and emit \"use strict\" for each source file."
	},
	"6142": {
		"category": "Error",
		"code": 6142,
		"message": "Module '{0}' was resolved to '{1}', but '--jsx' is not set."
	},
	"6144": {
		"category": "Message",
		"code": 6144,
		"message": "Module '{0}' was resolved as locally declared ambient module in file '{1}'."
	},
	"6145": {
		"category": "Message",
		"code": 6145,
		"message": "Module '{0}' was resolved as ambient module declared in '{1}' since this file was not modified."
	},
	"6146": {
		"category": "Message",
		"code": 6146,
		"message": "Specify the JSX factory function to use when targeting 'react' JSX emit, e.g. 'React.createElement' or 'h'."
	},
	"6147": {
		"category": "Message",
		"code": 6147,
		"message": "Resolution for module '{0}' was found in cache from location '{1}'."
	},
	"6148": {
		"category": "Message",
		"code": 6148,
		"message": "Directory '{0}' does not exist, skipping all lookups in it."
	},
	"6149": {
		"category": "Message",
		"code": 6149,
		"message": "Show diagnostic information."
	},
	"6150": {
		"category": "Message",
		"code": 6150,
		"message": "Show verbose diagnostic information."
	},
	"6151": {
		"category": "Message",
		"code": 6151,
		"message": "Emit a single file with source maps instead of having a separate file."
	},
	"6152": {
		"category": "Message",
		"code": 6152,
		"message": "Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set."
	},
	"6153": {
		"category": "Message",
		"code": 6153,
		"message": "Transpile each file as a separate module (similar to 'ts.transpileModule')."
	},
	"6154": {
		"category": "Message",
		"code": 6154,
		"message": "Print names of generated files part of the compilation."
	},
	"6155": {
		"category": "Message",
		"code": 6155,
		"message": "Print names of files part of the compilation."
	},
	"6156": {
		"category": "Message",
		"code": 6156,
		"message": "The locale used when displaying messages to the user (e.g. 'en-us')"
	},
	"6157": {
		"category": "Message",
		"code": 6157,
		"message": "Do not generate custom helper functions like '__extends' in compiled output."
	},
	"6158": {
		"category": "Message",
		"code": 6158,
		"message": "Do not include the default library file (lib.d.ts)."
	},
	"6159": {
		"category": "Message",
		"code": 6159,
		"message": "Do not add triple-slash references or imported modules to the list of compiled files."
	},
	"6160": {
		"category": "Message",
		"code": 6160,
		"message": "[Deprecated] Use '--skipLibCheck' instead. Skip type checking of default library declaration files."
	},
	"6161": {
		"category": "Message",
		"code": 6161,
		"message": "List of folders to include type definitions from."
	},
	"6162": {
		"category": "Message",
		"code": 6162,
		"message": "Disable size limitations on JavaScript projects."
	},
	"6163": {
		"category": "Message",
		"code": 6163,
		"message": "The character set of the input files."
	},
	"6164": {
		"category": "Message",
		"code": 6164,
		"message": "Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files."
	},
	"6165": {
		"category": "Message",
		"code": 6165,
		"message": "Do not truncate error messages."
	},
	"6166": {
		"category": "Message",
		"code": 6166,
		"message": "Output directory for generated declaration files."
	},
	"6167": {
		"category": "Message",
		"code": 6167,
		"message": "A series of entries which re-map imports to lookup locations relative to the 'baseUrl'."
	},
	"6168": {
		"category": "Message",
		"code": 6168,
		"message": "List of root folders whose combined content represents the structure of the project at runtime."
	},
	"6169": {
		"category": "Message",
		"code": 6169,
		"message": "Show all compiler options."
	},
	"6170": {
		"category": "Message",
		"code": 6170,
		"message": "[Deprecated] Use '--outFile' instead. Concatenate and emit output to single file"
	},
	"6171": {
		"category": "Message",
		"code": 6171,
		"message": "Command-line Options"
	},
	"6172": {
		"category": "Message",
		"code": 6172,
		"message": "Basic Options"
	},
	"6173": {
		"category": "Message",
		"code": 6173,
		"message": "Strict Type-Checking Options"
	},
	"6174": {
		"category": "Message",
		"code": 6174,
		"message": "Module Resolution Options"
	},
	"6175": {
		"category": "Message",
		"code": 6175,
		"message": "Source Map Options"
	},
	"6176": {
		"category": "Message",
		"code": 6176,
		"message": "Additional Checks"
	},
	"6177": {
		"category": "Message",
		"code": 6177,
		"message": "Experimental Options"
	},
	"6178": {
		"category": "Message",
		"code": 6178,
		"message": "Advanced Options"
	},
	"6179": {
		"category": "Message",
		"code": 6179,
		"message": "Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'."
	},
	"6180": {
		"category": "Message",
		"code": 6180,
		"message": "Enable all strict type-checking options."
	},
	"6181": {
		"category": "Message",
		"code": 6181,
		"message": "List of language service plugins."
	},
	"6182": {
		"category": "Message",
		"code": 6182,
		"message": "Scoped package detected, looking in '{0}'"
	},
	"6183": {
		"category": "Message",
		"code": 6183,
		"message": "Reusing resolution of module '{0}' to file '{1}' from old program."
	},
	"6184": {
		"category": "Message",
		"code": 6184,
		"message": "Reusing module resolutions originating in '{0}' since resolutions are unchanged from old program."
	},
	"6185": {
		"category": "Message",
		"code": 6185,
		"message": "Disable strict checking of generic signatures in function types."
	},
	"6186": {
		"category": "Message",
		"code": 6186,
		"message": "Enable strict checking of function types."
	},
	"6187": {
		"category": "Message",
		"code": 6187,
		"message": "Enable strict checking of property initialization in classes."
	},
	"6188": {
		"category": "Error",
		"code": 6188,
		"message": "Numeric separators are not allowed here."
	},
	"6189": {
		"category": "Error",
		"code": 6189,
		"message": "Multiple consecutive numeric separators are not permitted."
	},
	"6191": {
		"category": "Message",
		"code": 6191,
		"message": "Whether to keep outdated console output in watch mode instead of clearing the screen."
	},
	"6192": {
		"category": "Error",
		"code": 6192,
		"reportsUnnecessary": true,
		"message": "All imports in import declaration are unused."
	},
	"6193": {
		"category": "Message",
		"code": 6193,
		"message": "Found 1 error. Watching for file changes."
	},
	"6194": {
		"category": "Message",
		"code": 6194,
		"message": "Found {0} errors. Watching for file changes."
	},
	"6195": {
		"category": "Message",
		"code": 6195,
		"message": "Resolve 'keyof' to string valued property names only (no numbers or symbols)."
	},
	"6196": {
		"category": "Error",
		"code": 6196,
		"reportsUnnecessary": true,
		"message": "'{0}' is declared but never used."
	},
	"6197": {
		"category": "Message",
		"code": 6197,
		"message": "Include modules imported with '.json' extension"
	},
	"6198": {
		"category": "Error",
		"code": 6198,
		"reportsUnnecessary": true,
		"message": "All destructured elements are unused."
	},
	"6199": {
		"category": "Error",
		"code": 6199,
		"reportsUnnecessary": true,
		"message": "All variables are unused."
	},
	"6200": {
		"category": "Error",
		"code": 6200,
		"message": "Definitions of the following identifiers conflict with those in another file: {0}"
	},
	"6201": {
		"category": "Message",
		"code": 6201,
		"message": "Conflicts are in this file."
	},
	"6202": {
		"category": "Error",
		"code": 6202,
		"message": "Project references may not form a circular graph. Cycle detected: {0}"
	},
	"6203": {
		"category": "Message",
		"code": 6203,
		"message": "'{0}' was also declared here."
	},
	"6204": {
		"category": "Message",
		"code": 6204,
		"message": "and here."
	},
	"6205": {
		"category": "Error",
		"code": 6205,
		"message": "All type parameters are unused"
	},
	"6206": {
		"category": "Message",
		"code": 6206,
		"message": "'package.json' has a 'typesVersions' field with version-specific path mappings."
	},
	"6207": {
		"category": "Message",
		"code": 6207,
		"message": "'package.json' does not have a 'typesVersions' entry that matches version '{0}'."
	},
	"6208": {
		"category": "Message",
		"code": 6208,
		"message": "'package.json' has a 'typesVersions' entry '{0}' that matches compiler version '{1}', looking for a pattern to match module name '{2}'."
	},
	"6209": {
		"category": "Message",
		"code": 6209,
		"message": "'package.json' has a 'typesVersions' entry '{0}' that is not a valid semver range."
	},
	"6210": {
		"category": "Message",
		"code": 6210,
		"message": "An argument for '{0}' was not provided."
	},
	"6211": {
		"category": "Message",
		"code": 6211,
		"message": "An argument matching this binding pattern was not provided."
	},
	"6212": {
		"category": "Message",
		"code": 6212,
		"message": "Did you mean to call this expression?"
	},
	"6213": {
		"category": "Message",
		"code": 6213,
		"message": "Did you mean to use 'new' with this expression?"
	},
	"6214": {
		"category": "Message",
		"code": 6214,
		"message": "Enable strict 'bind', 'call', and 'apply' methods on functions."
	},
	"6215": {
		"category": "Message",
		"code": 6215,
		"message": "Using compiler options of project reference redirect '{0}'."
	},
	"6216": {
		"category": "Message",
		"code": 6216,
		"message": "Found 1 error."
	},
	"6217": {
		"category": "Message",
		"code": 6217,
		"message": "Found {0} errors."
	},
	"6218": {
		"category": "Message",
		"code": 6218,
		"message": "======== Module name '{0}' was successfully resolved to '{1}' with Package ID '{2}'. ========"
	},
	"6219": {
		"category": "Message",
		"code": 6219,
		"message": "======== Type reference directive '{0}' was successfully resolved to '{1}' with Package ID '{2}', primary: {3}. ========"
	},
	"6220": {
		"category": "Message",
		"code": 6220,
		"message": "'package.json' had a falsy '{0}' field."
	},
	"6221": {
		"category": "Message",
		"code": 6221,
		"message": "Disable use of source files instead of declaration files from referenced projects."
	},
	"6222": {
		"category": "Message",
		"code": 6222,
		"message": "Emit class fields with Define instead of Set."
	},
	"6223": {
		"category": "Message",
		"code": 6223,
		"message": "Generates a CPU profile."
	},
	"6224": {
		"category": "Message",
		"code": 6224,
		"message": "Disable solution searching for this project."
	},
	"6225": {
		"category": "Message",
		"code": 6225,
		"message": "Specify strategy for watching file: 'FixedPollingInterval' (default), 'PriorityPollingInterval', 'DynamicPriorityPolling', 'UseFsEvents', 'UseFsEventsOnParentDirectory'."
	},
	"6226": {
		"category": "Message",
		"code": 6226,
		"message": "Specify strategy for watching directory on platforms that don't support recursive watching natively: 'UseFsEvents' (default), 'FixedPollingInterval', 'DynamicPriorityPolling'."
	},
	"6227": {
		"category": "Message",
		"code": 6227,
		"message": "Specify strategy for creating a polling watch when it fails to create using file system events: 'FixedInterval' (default), 'PriorityInterval', 'DynamicPriority'."
	},
	"6228": {
		"category": "Message",
		"code": 6228,
		"message": "Synchronously call callbacks and update the state of directory watchers on platforms that don't support recursive watching natively."
	},
	"6300": {
		"category": "Message",
		"code": 6300,
		"message": "Projects to reference"
	},
	"6302": {
		"category": "Message",
		"code": 6302,
		"message": "Enable project compilation"
	},
	"6304": {
		"category": "Error",
		"code": 6304,
		"message": "Composite projects may not disable declaration emit."
	},
	"6305": {
		"category": "Error",
		"code": 6305,
		"message": "Output file '{0}' has not been built from source file '{1}'."
	},
	"6306": {
		"category": "Error",
		"code": 6306,
		"message": "Referenced project '{0}' must have setting \"composite\": true."
	},
	"6307": {
		"category": "Error",
		"code": 6307,
		"message": "File '{0}' is not listed within the file list of project '{1}'. Projects must list all files or use an 'include' pattern."
	},
	"6308": {
		"category": "Error",
		"code": 6308,
		"message": "Cannot prepend project '{0}' because it does not have 'outFile' set"
	},
	"6309": {
		"category": "Error",
		"code": 6309,
		"message": "Output file '{0}' from project '{1}' does not exist"
	},
	"6350": {
		"category": "Message",
		"code": 6350,
		"message": "Project '{0}' is out of date because oldest output '{1}' is older than newest input '{2}'"
	},
	"6351": {
		"category": "Message",
		"code": 6351,
		"message": "Project '{0}' is up to date because newest input '{1}' is older than oldest output '{2}'"
	},
	"6352": {
		"category": "Message",
		"code": 6352,
		"message": "Project '{0}' is out of date because output file '{1}' does not exist"
	},
	"6353": {
		"category": "Message",
		"code": 6353,
		"message": "Project '{0}' is out of date because its dependency '{1}' is out of date"
	},
	"6354": {
		"category": "Message",
		"code": 6354,
		"message": "Project '{0}' is up to date with .d.ts files from its dependencies"
	},
	"6355": {
		"category": "Message",
		"code": 6355,
		"message": "Projects in this build: {0}"
	},
	"6356": {
		"category": "Message",
		"code": 6356,
		"message": "A non-dry build would delete the following files: {0}"
	},
	"6357": {
		"category": "Message",
		"code": 6357,
		"message": "A non-dry build would build project '{0}'"
	},
	"6358": {
		"category": "Message",
		"code": 6358,
		"message": "Building project '{0}'..."
	},
	"6359": {
		"category": "Message",
		"code": 6359,
		"message": "Updating output timestamps of project '{0}'..."
	},
	"6360": {
		"category": "Message",
		"code": 6360,
		"message": "delete this - Project '{0}' is up to date because it was previously built"
	},
	"6361": {
		"category": "Message",
		"code": 6361,
		"message": "Project '{0}' is up to date"
	},
	"6362": {
		"category": "Message",
		"code": 6362,
		"message": "Skipping build of project '{0}' because its dependency '{1}' has errors"
	},
	"6363": {
		"category": "Message",
		"code": 6363,
		"message": "Project '{0}' can't be built because its dependency '{1}' has errors"
	},
	"6364": {
		"category": "Message",
		"code": 6364,
		"message": "Build one or more projects and their dependencies, if out of date"
	},
	"6365": {
		"category": "Message",
		"code": 6365,
		"message": "Delete the outputs of all projects"
	},
	"6366": {
		"category": "Message",
		"code": 6366,
		"message": "Enable verbose logging"
	},
	"6367": {
		"category": "Message",
		"code": 6367,
		"message": "Show what would be built (or deleted, if specified with '--clean')"
	},
	"6368": {
		"category": "Message",
		"code": 6368,
		"message": "Build all projects, including those that appear to be up to date"
	},
	"6369": {
		"category": "Error",
		"code": 6369,
		"message": "Option '--build' must be the first command line argument."
	},
	"6370": {
		"category": "Error",
		"code": 6370,
		"message": "Options '{0}' and '{1}' cannot be combined."
	},
	"6371": {
		"category": "Message",
		"code": 6371,
		"message": "Updating unchanged output timestamps of project '{0}'..."
	},
	"6372": {
		"category": "Message",
		"code": 6372,
		"message": "Project '{0}' is out of date because output of its dependency '{1}' has changed"
	},
	"6373": {
		"category": "Message",
		"code": 6373,
		"message": "Updating output of project '{0}'..."
	},
	"6374": {
		"category": "Message",
		"code": 6374,
		"message": "A non-dry build would update timestamps for output of project '{0}'"
	},
	"6375": {
		"category": "Message",
		"code": 6375,
		"message": "A non-dry build would update output of project '{0}'"
	},
	"6376": {
		"category": "Message",
		"code": 6376,
		"message": "Cannot update output of project '{0}' because there was error reading file '{1}'"
	},
	"6377": {
		"category": "Error",
		"code": 6377,
		"message": "Cannot write file '{0}' because it will overwrite '.tsbuildinfo' file generated by referenced project '{1}'"
	},
	"6378": {
		"category": "Message",
		"code": 6378,
		"message": "Enable incremental compilation"
	},
	"6379": {
		"category": "Error",
		"code": 6379,
		"message": "Composite projects may not disable incremental compilation."
	},
	"6380": {
		"category": "Message",
		"code": 6380,
		"message": "Specify file to store incremental compilation information"
	},
	"6381": {
		"category": "Message",
		"code": 6381,
		"message": "Project '{0}' is out of date because output for it was generated with version '{1}' that differs with current version '{2}'"
	},
	"6382": {
		"category": "Message",
		"code": 6382,
		"message": "Skipping build of project '{0}' because its dependency '{1}' was not built"
	},
	"6383": {
		"category": "Message",
		"code": 6383,
		"message": "Project '{0}' can't be built because its dependency '{1}' was not built"
	},
	"6384": {
		"category": "Message",
		"code": 6384,
		"message": "Have recompiles in '--incremental' and '--watch' assume that changes within a file will only affect files directly depending on it."
	},
	"6500": {
		"category": "Message",
		"code": 6500,
		"message": "The expected type comes from property '{0}' which is declared here on type '{1}'"
	},
	"6501": {
		"category": "Message",
		"code": 6501,
		"message": "The expected type comes from this index signature."
	},
	"6502": {
		"category": "Message",
		"code": 6502,
		"message": "The expected type comes from the return type of this signature."
	},
	"6503": {
		"category": "Message",
		"code": 6503,
		"message": "Print names of files that are part of the compilation and then stop processing."
	},
	"6504": {
		"category": "Error",
		"code": 6504,
		"message": "File '{0}' is a JavaScript file. Did you mean to enable the 'allowJs' option?"
	},
	"7005": {
		"category": "Error",
		"code": 7005,
		"message": "Variable '{0}' implicitly has an '{1}' type."
	},
	"7006": {
		"category": "Error",
		"code": 7006,
		"message": "Parameter '{0}' implicitly has an '{1}' type."
	},
	"7008": {
		"category": "Error",
		"code": 7008,
		"message": "Member '{0}' implicitly has an '{1}' type."
	},
	"7009": {
		"category": "Error",
		"code": 7009,
		"message": "'new' expression, whose target lacks a construct signature, implicitly has an 'any' type."
	},
	"7010": {
		"category": "Error",
		"code": 7010,
		"message": "'{0}', which lacks return-type annotation, implicitly has an '{1}' return type."
	},
	"7011": {
		"category": "Error",
		"code": 7011,
		"message": "Function expression, which lacks return-type annotation, implicitly has an '{0}' return type."
	},
	"7013": {
		"category": "Error",
		"code": 7013,
		"message": "Construct signature, which lacks return-type annotation, implicitly has an 'any' return type."
	},
	"7014": {
		"category": "Error",
		"code": 7014,
		"message": "Function type, which lacks return-type annotation, implicitly has an '{0}' return type."
	},
	"7015": {
		"category": "Error",
		"code": 7015,
		"message": "Element implicitly has an 'any' type because index expression is not of type 'number'."
	},
	"7016": {
		"category": "Error",
		"code": 7016,
		"message": "Could not find a declaration file for module '{0}'. '{1}' implicitly has an 'any' type."
	},
	"7017": {
		"category": "Error",
		"code": 7017,
		"message": "Element implicitly has an 'any' type because type '{0}' has no index signature."
	},
	"7018": {
		"category": "Error",
		"code": 7018,
		"message": "Object literal's property '{0}' implicitly has an '{1}' type."
	},
	"7019": {
		"category": "Error",
		"code": 7019,
		"message": "Rest parameter '{0}' implicitly has an 'any[]' type."
	},
	"7020": {
		"category": "Error",
		"code": 7020,
		"message": "Call signature, which lacks return-type annotation, implicitly has an 'any' return type."
	},
	"7022": {
		"category": "Error",
		"code": 7022,
		"message": "'{0}' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer."
	},
	"7023": {
		"category": "Error",
		"code": 7023,
		"message": "'{0}' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions."
	},
	"7024": {
		"category": "Error",
		"code": 7024,
		"message": "Function implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions."
	},
	"7025": {
		"category": "Error",
		"code": 7025,
		"message": "Generator implicitly has yield type '{0}' because it does not yield any values. Consider supplying a return type annotation."
	},
	"7026": {
		"category": "Error",
		"code": 7026,
		"message": "JSX element implicitly has type 'any' because no interface 'JSX.{0}' exists."
	},
	"7027": {
		"category": "Error",
		"code": 7027,
		"reportsUnnecessary": true,
		"message": "Unreachable code detected."
	},
	"7028": {
		"category": "Error",
		"code": 7028,
		"reportsUnnecessary": true,
		"message": "Unused label."
	},
	"7029": {
		"category": "Error",
		"code": 7029,
		"message": "Fallthrough case in switch."
	},
	"7030": {
		"category": "Error",
		"code": 7030,
		"message": "Not all code paths return a value."
	},
	"7031": {
		"category": "Error",
		"code": 7031,
		"message": "Binding element '{0}' implicitly has an '{1}' type."
	},
	"7032": {
		"category": "Error",
		"code": 7032,
		"message": "Property '{0}' implicitly has type 'any', because its set accessor lacks a parameter type annotation."
	},
	"7033": {
		"category": "Error",
		"code": 7033,
		"message": "Property '{0}' implicitly has type 'any', because its get accessor lacks a return type annotation."
	},
	"7034": {
		"category": "Error",
		"code": 7034,
		"message": "Variable '{0}' implicitly has type '{1}' in some locations where its type cannot be determined."
	},
	"7035": {
		"category": "Error",
		"code": 7035,
		"message": "Try `npm install @types/{1}` if it exists or add a new declaration (.d.ts) file containing `declare module '{0}';`"
	},
	"7036": {
		"category": "Error",
		"code": 7036,
		"message": "Dynamic import's specifier must be of type 'string', but here has type '{0}'."
	},
	"7037": {
		"category": "Message",
		"code": 7037,
		"message": "Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'."
	},
	"7038": {
		"category": "Message",
		"code": 7038,
		"message": "Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead."
	},
	"7039": {
		"category": "Error",
		"code": 7039,
		"message": "Mapped object type implicitly has an 'any' template type."
	},
	"7040": {
		"category": "Error",
		"code": 7040,
		"message": "If the '{0}' package actually exposes this module, consider sending a pull request to amend 'https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/{1}`"
	},
	"7041": {
		"category": "Error",
		"code": 7041,
		"message": "The containing arrow function captures the global value of 'this'."
	},
	"7042": {
		"category": "Error",
		"code": 7042,
		"message": "Module '{0}' was resolved to '{1}', but '--resolveJsonModule' is not used."
	},
	"7043": {
		"category": "Suggestion",
		"code": 7043,
		"message": "Variable '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage."
	},
	"7044": {
		"category": "Suggestion",
		"code": 7044,
		"message": "Parameter '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage."
	},
	"7045": {
		"category": "Suggestion",
		"code": 7045,
		"message": "Member '{0}' implicitly has an '{1}' type, but a better type may be inferred from usage."
	},
	"7046": {
		"category": "Suggestion",
		"code": 7046,
		"message": "Variable '{0}' implicitly has type '{1}' in some locations, but a better type may be inferred from usage."
	},
	"7047": {
		"category": "Suggestion",
		"code": 7047,
		"message": "Rest parameter '{0}' implicitly has an 'any[]' type, but a better type may be inferred from usage."
	},
	"7048": {
		"category": "Suggestion",
		"code": 7048,
		"message": "Property '{0}' implicitly has type 'any', but a better type for its get accessor may be inferred from usage."
	},
	"7049": {
		"category": "Suggestion",
		"code": 7049,
		"message": "Property '{0}' implicitly has type 'any', but a better type for its set accessor may be inferred from usage."
	},
	"7050": {
		"category": "Suggestion",
		"code": 7050,
		"message": "'{0}' implicitly has an '{1}' return type, but a better type may be inferred from usage."
	},
	"7051": {
		"category": "Error",
		"code": 7051,
		"message": "Parameter has a name but no type. Did you mean '{0}: {1}'?"
	},
	"7052": {
		"category": "Error",
		"code": 7052,
		"message": "Element implicitly has an 'any' type because type '{0}' has no index signature. Did you mean to call '{1}'?"
	},
	"7053": {
		"category": "Error",
		"code": 7053,
		"message": "Element implicitly has an 'any' type because expression of type '{0}' can't be used to index type '{1}'."
	},
	"7054": {
		"category": "Error",
		"code": 7054,
		"message": "No index signature with a parameter of type '{0}' was found on type '{1}'."
	},
	"7055": {
		"category": "Error",
		"code": 7055,
		"message": "'{0}', which lacks return-type annotation, implicitly has an '{1}' yield type."
	},
	"8000": {
		"category": "Error",
		"code": 8000,
		"message": "You cannot rename this element."
	},
	"8001": {
		"category": "Error",
		"code": 8001,
		"message": "You cannot rename elements that are defined in the standard TypeScript library."
	},
	"8002": {
		"category": "Error",
		"code": 8002,
		"message": "'import ... =' can only be used in TypeScript files."
	},
	"8003": {
		"category": "Error",
		"code": 8003,
		"message": "'export =' can only be used in TypeScript files."
	},
	"8004": {
		"category": "Error",
		"code": 8004,
		"message": "Type parameter declarations can only be used in TypeScript files."
	},
	"8005": {
		"category": "Error",
		"code": 8005,
		"message": "'implements' clauses can only be used in TypeScript files."
	},
	"8006": {
		"category": "Error",
		"code": 8006,
		"message": "'{0}' declarations can only be used in TypeScript files."
	},
	"8008": {
		"category": "Error",
		"code": 8008,
		"message": "Type aliases can only be used in TypeScript files."
	},
	"8009": {
		"category": "Error",
		"code": 8009,
		"message": "The '{0}' modifier can only be used in TypeScript files."
	},
	"8010": {
		"category": "Error",
		"code": 8010,
		"message": "Type annotations can only be used in TypeScript files."
	},
	"8011": {
		"category": "Error",
		"code": 8011,
		"message": "Type arguments can only be used in TypeScript files."
	},
	"8012": {
		"category": "Error",
		"code": 8012,
		"message": "Parameter modifiers can only be used in TypeScript files."
	},
	"8013": {
		"category": "Error",
		"code": 8013,
		"message": "Non-null assertions can only be used in TypeScript files."
	},
	"8016": {
		"category": "Error",
		"code": 8016,
		"message": "Type assertion expressions can only be used in TypeScript files."
	},
	"8017": {
		"category": "Error",
		"code": 8017,
		"message": "Octal literal types must use ES2015 syntax. Use the syntax '{0}'."
	},
	"8018": {
		"category": "Error",
		"code": 8018,
		"message": "Octal literals are not allowed in enums members initializer. Use the syntax '{0}'."
	},
	"8019": {
		"category": "Message",
		"code": 8019,
		"message": "Report errors in .js files."
	},
	"8020": {
		"category": "Error",
		"code": 8020,
		"message": "JSDoc types can only be used inside documentation comments."
	},
	"8021": {
		"category": "Error",
		"code": 8021,
		"message": "JSDoc '@typedef' tag should either have a type annotation or be followed by '@property' or '@member' tags."
	},
	"8022": {
		"category": "Error",
		"code": 8022,
		"message": "JSDoc '@{0}' is not attached to a class."
	},
	"8023": {
		"category": "Error",
		"code": 8023,
		"message": "JSDoc '@{0} {1}' does not match the 'extends {2}' clause."
	},
	"8024": {
		"category": "Error",
		"code": 8024,
		"message": "JSDoc '@param' tag has name '{0}', but there is no parameter with that name."
	},
	"8025": {
		"category": "Error",
		"code": 8025,
		"message": "Class declarations cannot have more than one `@augments` or `@extends` tag."
	},
	"8026": {
		"category": "Error",
		"code": 8026,
		"message": "Expected {0} type arguments; provide these with an '@extends' tag."
	},
	"8027": {
		"category": "Error",
		"code": 8027,
		"message": "Expected {0}-{1} type arguments; provide these with an '@extends' tag."
	},
	"8028": {
		"category": "Error",
		"code": 8028,
		"message": "JSDoc '...' may only appear in the last parameter of a signature."
	},
	"8029": {
		"category": "Error",
		"code": 8029,
		"message": "JSDoc '@param' tag has name '{0}', but there is no parameter with that name. It would match 'arguments' if it had an array type."
	},
	"8030": {
		"category": "Error",
		"code": 8030,
		"message": "The type of a function declaration must match the function's signature."
	},
	"8031": {
		"category": "Error",
		"code": 8031,
		"message": "You cannot rename a module via a global import."
	},
	"8032": {
		"category": "Error",
		"code": 8032,
		"message": "Qualified name '{0}' is not allowed without a leading '@param {object} {1}'."
	},
	"9002": {
		"category": "Error",
		"code": 9002,
		"message": "Only identifiers/qualified-names with optional type arguments are currently supported in a class 'extends' clause."
	},
	"9003": {
		"category": "Error",
		"code": 9003,
		"message": "'class' expressions are not currently supported."
	},
	"9004": {
		"category": "Error",
		"code": 9004,
		"message": "Language service is disabled."
	},
	"9005": {
		"category": "Error",
		"code": 9005,
		"message": "Declaration emit for this file requires using private name '{0}'. An explicit type annotation may unblock declaration emit."
	},
	"9006": {
		"category": "Error",
		"code": 9006,
		"message": "Declaration emit for this file requires using private name '{0}' from module '{1}'. An explicit type annotation may unblock declaration emit."
	},
	"17000": {
		"category": "Error",
		"code": 17000,
		"message": "JSX attributes must only be assigned a non-empty 'expression'."
	},
	"17001": {
		"category": "Error",
		"code": 17001,
		"message": "JSX elements cannot have multiple attributes with the same name."
	},
	"17002": {
		"category": "Error",
		"code": 17002,
		"message": "Expected corresponding JSX closing tag for '{0}'."
	},
	"17003": {
		"category": "Error",
		"code": 17003,
		"message": "JSX attribute expected."
	},
	"17004": {
		"category": "Error",
		"code": 17004,
		"message": "Cannot use JSX unless the '--jsx' flag is provided."
	},
	"17005": {
		"category": "Error",
		"code": 17005,
		"message": "A constructor cannot contain a 'super' call when its class extends 'null'."
	},
	"17006": {
		"category": "Error",
		"code": 17006,
		"message": "An unary expression with the '{0}' operator is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses."
	},
	"17007": {
		"category": "Error",
		"code": 17007,
		"message": "A type assertion expression is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses."
	},
	"17008": {
		"category": "Error",
		"code": 17008,
		"message": "JSX element '{0}' has no corresponding closing tag."
	},
	"17009": {
		"category": "Error",
		"code": 17009,
		"message": "'super' must be called before accessing 'this' in the constructor of a derived class."
	},
	"17010": {
		"category": "Error",
		"code": 17010,
		"message": "Unknown type acquisition option '{0}'."
	},
	"17011": {
		"category": "Error",
		"code": 17011,
		"message": "'super' must be called before accessing a property of 'super' in the constructor of a derived class."
	},
	"17012": {
		"category": "Error",
		"code": 17012,
		"message": "'{0}' is not a valid meta-property for keyword '{1}'. Did you mean '{2}'?"
	},
	"17013": {
		"category": "Error",
		"code": 17013,
		"message": "Meta-property '{0}' is only allowed in the body of a function declaration, function expression, or constructor."
	},
	"17014": {
		"category": "Error",
		"code": 17014,
		"message": "JSX fragment has no corresponding closing tag."
	},
	"17015": {
		"category": "Error",
		"code": 17015,
		"message": "Expected corresponding closing tag for JSX fragment."
	},
	"17016": {
		"category": "Error",
		"code": 17016,
		"message": "JSX fragment is not supported when using --jsxFactory"
	},
	"17017": {
		"category": "Error",
		"code": 17017,
		"message": "JSX fragment is not supported when using an inline JSX factory pragma"
	},
	"17018": {
		"category": "Error",
		"code": 17018,
		"message": "Unknown type acquisition option '{0}'. Did you mean '{1}'?"
	},
	"18000": {
		"category": "Error",
		"code": 18000,
		"message": "Circularity detected while resolving configuration: {0}"
	},
	"18001": {
		"category": "Error",
		"code": 18001,
		"message": "A path in an 'extends' option must be relative or rooted, but '{0}' is not."
	},
	"18002": {
		"category": "Error",
		"code": 18002,
		"message": "The 'files' list in config file '{0}' is empty."
	},
	"18003": {
		"category": "Error",
		"code": 18003,
		"message": "No inputs were found in config file '{0}'. Specified 'include' paths were '{1}' and 'exclude' paths were '{2}'."
	},
	"18004": {
		"category": "Error",
		"code": 18004,
		"message": "No value exists in scope for the shorthand property '{0}'. Either declare one or provide an initializer."
	},
	"18006": {
		"category": "Error",
		"code": 18006,
		"message": "Classes may not have a field named 'constructor'."
	},
	"18007": {
		"category": "Error",
		"code": 18007,
		"message": "JSX expressions may not use the comma operator. Did you mean to write an array?"
	},
	"18009": {
		"category": "Error",
		"code": 18009,
		"message": "Private identifiers cannot be used as parameters"
	},
	"18010": {
		"category": "Error",
		"code": 18010,
		"message": "An accessibility modifier cannot be used with a private identifier."
	},
	"18011": {
		"category": "Error",
		"code": 18011,
		"message": "The operand of a 'delete' operator cannot be a private identifier."
	},
	"18012": {
		"category": "Error",
		"code": 18012,
		"message": "'#constructor' is a reserved word."
	},
	"18013": {
		"category": "Error",
		"code": 18013,
		"message": "Property '{0}' is not accessible outside class '{1}' because it has a private identifier."
	},
	"18014": {
		"category": "Error",
		"code": 18014,
		"message": "The property '{0}' cannot be accessed on type '{1}' within this class because it is shadowed by another private identifier with the same spelling."
	},
	"18015": {
		"category": "Error",
		"code": 18015,
		"message": "Property '{0}' in type '{1}' refers to a different member that cannot be accessed from within type '{2}'."
	},
	"18016": {
		"category": "Error",
		"code": 18016,
		"message": "Private identifiers are not allowed outside class bodies."
	},
	"18017": {
		"category": "Error",
		"code": 18017,
		"message": "The shadowing declaration of '{0}' is defined here"
	},
	"18018": {
		"category": "Error",
		"code": 18018,
		"message": "The declaration of '{0}' that you probably intended to use is defined here"
	},
	"18019": {
		"category": "Error",
		"code": 18019,
		"message": "'{0}' modifier cannot be used with a private identifier"
	},
	"18022": {
		"category": "Error",
		"code": 18022,
		"message": "A method cannot be named with a private identifier."
	},
	"18023": {
		"category": "Error",
		"code": 18023,
		"message": "An accessor cannot be named with a private identifier."
	},
	"18024": {
		"category": "Error",
		"code": 18024,
		"message": "An enum member cannot be named with a private identifier."
	},
	"18026": {
		"category": "Error",
		"code": 18026,
		"message": "'#!' can only be used at the start of a file."
	},
	"18027": {
		"category": "Error",
		"code": 18027,
		"message": "Compiler reserves name '{0}' when emitting private identifier downlevel."
	},
	"18028": {
		"category": "Error",
		"code": 18028,
		"message": "Private identifiers are only available when targeting ECMAScript 2015 and higher."
	},
	"18029": {
		"category": "Error",
		"code": 18029,
		"message": "Private identifiers are not allowed in variable declarations."
	},
	"18030": {
		"category": "Error",
		"code": 18030,
		"message": "An optional chain cannot contain private identifiers."
	},
	"80001": {
		"category": "Suggestion",
		"code": 80001,
		"message": "File is a CommonJS module; it may be converted to an ES6 module."
	},
	"80002": {
		"category": "Suggestion",
		"code": 80002,
		"message": "This constructor function may be converted to a class declaration."
	},
	"80003": {
		"category": "Suggestion",
		"code": 80003,
		"message": "Import may be converted to a default import."
	},
	"80004": {
		"category": "Suggestion",
		"code": 80004,
		"message": "JSDoc types may be moved to TypeScript types."
	},
	"80005": {
		"category": "Suggestion",
		"code": 80005,
		"message": "'require' call may be converted to an import."
	},
	"80006": {
		"category": "Suggestion",
		"code": 80006,
		"message": "This may be converted to an async function."
	},
	"80007": {
		"category": "Suggestion",
		"code": 80007,
		"message": "'await' has no effect on the type of this expression."
	},
	"80008": {
		"category": "Suggestion",
		"code": 80008,
		"message": "Numeric literals with absolute values equal to 2^53 or greater are too large to be represented accurately as integers."
	},
	"90001": {
		"category": "Message",
		"code": 90001,
		"message": "Add missing 'super()' call"
	},
	"90002": {
		"category": "Message",
		"code": 90002,
		"message": "Make 'super()' call the first statement in the constructor"
	},
	"90003": {
		"category": "Message",
		"code": 90003,
		"message": "Change 'extends' to 'implements'"
	},
	"90004": {
		"category": "Message",
		"code": 90004,
		"message": "Remove unused declaration for: '{0}'"
	},
	"90005": {
		"category": "Message",
		"code": 90005,
		"message": "Remove import from '{0}'"
	},
	"90006": {
		"category": "Message",
		"code": 90006,
		"message": "Implement interface '{0}'"
	},
	"90007": {
		"category": "Message",
		"code": 90007,
		"message": "Implement inherited abstract class"
	},
	"90008": {
		"category": "Message",
		"code": 90008,
		"message": "Add '{0}.' to unresolved variable"
	},
	"90009": {
		"category": "Message",
		"code": 90009,
		"message": "Remove destructuring"
	},
	"90010": {
		"category": "Message",
		"code": 90010,
		"message": "Remove variable statement"
	},
	"90011": {
		"category": "Message",
		"code": 90011,
		"message": "Remove template tag"
	},
	"90012": {
		"category": "Message",
		"code": 90012,
		"message": "Remove type parameters"
	},
	"90013": {
		"category": "Message",
		"code": 90013,
		"message": "Import '{0}' from module \"{1}\""
	},
	"90014": {
		"category": "Message",
		"code": 90014,
		"message": "Change '{0}' to '{1}'"
	},
	"90015": {
		"category": "Message",
		"code": 90015,
		"message": "Add '{0}' to existing import declaration from \"{1}\""
	},
	"90016": {
		"category": "Message",
		"code": 90016,
		"message": "Declare property '{0}'"
	},
	"90017": {
		"category": "Message",
		"code": 90017,
		"message": "Add index signature for property '{0}'"
	},
	"90018": {
		"category": "Message",
		"code": 90018,
		"message": "Disable checking for this file"
	},
	"90019": {
		"category": "Message",
		"code": 90019,
		"message": "Ignore this error message"
	},
	"90020": {
		"category": "Message",
		"code": 90020,
		"message": "Initialize property '{0}' in the constructor"
	},
	"90021": {
		"category": "Message",
		"code": 90021,
		"message": "Initialize static property '{0}'"
	},
	"90022": {
		"category": "Message",
		"code": 90022,
		"message": "Change spelling to '{0}'"
	},
	"90023": {
		"category": "Message",
		"code": 90023,
		"message": "Declare method '{0}'"
	},
	"90024": {
		"category": "Message",
		"code": 90024,
		"message": "Declare static method '{0}'"
	},
	"90025": {
		"category": "Message",
		"code": 90025,
		"message": "Prefix '{0}' with an underscore"
	},
	"90026": {
		"category": "Message",
		"code": 90026,
		"message": "Rewrite as the indexed access type '{0}'"
	},
	"90027": {
		"category": "Message",
		"code": 90027,
		"message": "Declare static property '{0}'"
	},
	"90028": {
		"category": "Message",
		"code": 90028,
		"message": "Call decorator expression"
	},
	"90029": {
		"category": "Message",
		"code": 90029,
		"message": "Add async modifier to containing function"
	},
	"90030": {
		"category": "Message",
		"code": 90030,
		"message": "Replace 'infer {0}' with 'unknown'"
	},
	"90031": {
		"category": "Message",
		"code": 90031,
		"message": "Replace all unused 'infer' with 'unknown'"
	},
	"90032": {
		"category": "Message",
		"code": 90032,
		"message": "Import default '{0}' from module \"{1}\""
	},
	"90033": {
		"category": "Message",
		"code": 90033,
		"message": "Add default import '{0}' to existing import declaration from \"{1}\""
	},
	"90034": {
		"category": "Message",
		"code": 90034,
		"message": "Add parameter name"
	},
	"90053": {
		"category": "Message",
		"code": 90053,
		"message": "Declare a private field named '{0}'."
	},
	"95001": {
		"category": "Message",
		"code": 95001,
		"message": "Convert function to an ES2015 class"
	},
	"95002": {
		"category": "Message",
		"code": 95002,
		"message": "Convert function '{0}' to class"
	},
	"95004": {
		"category": "Message",
		"code": 95004,
		"message": "Extract to {0} in {1}"
	},
	"95005": {
		"category": "Message",
		"code": 95005,
		"message": "Extract function"
	},
	"95006": {
		"category": "Message",
		"code": 95006,
		"message": "Extract constant"
	},
	"95007": {
		"category": "Message",
		"code": 95007,
		"message": "Extract to {0} in enclosing scope"
	},
	"95008": {
		"category": "Message",
		"code": 95008,
		"message": "Extract to {0} in {1} scope"
	},
	"95009": {
		"category": "Message",
		"code": 95009,
		"message": "Annotate with type from JSDoc"
	},
	"95010": {
		"category": "Message",
		"code": 95010,
		"message": "Annotate with types from JSDoc"
	},
	"95011": {
		"category": "Message",
		"code": 95011,
		"message": "Infer type of '{0}' from usage"
	},
	"95012": {
		"category": "Message",
		"code": 95012,
		"message": "Infer parameter types from usage"
	},
	"95013": {
		"category": "Message",
		"code": 95013,
		"message": "Convert to default import"
	},
	"95014": {
		"category": "Message",
		"code": 95014,
		"message": "Install '{0}'"
	},
	"95015": {
		"category": "Message",
		"code": 95015,
		"message": "Replace import with '{0}'."
	},
	"95016": {
		"category": "Message",
		"code": 95016,
		"message": "Use synthetic 'default' member."
	},
	"95017": {
		"category": "Message",
		"code": 95017,
		"message": "Convert to ES6 module"
	},
	"95018": {
		"category": "Message",
		"code": 95018,
		"message": "Add 'undefined' type to property '{0}'"
	},
	"95019": {
		"category": "Message",
		"code": 95019,
		"message": "Add initializer to property '{0}'"
	},
	"95020": {
		"category": "Message",
		"code": 95020,
		"message": "Add definite assignment assertion to property '{0}'"
	},
	"95022": {
		"category": "Message",
		"code": 95022,
		"message": "Add all missing members"
	},
	"95023": {
		"category": "Message",
		"code": 95023,
		"message": "Infer all types from usage"
	},
	"95024": {
		"category": "Message",
		"code": 95024,
		"message": "Delete all unused declarations"
	},
	"95025": {
		"category": "Message",
		"code": 95025,
		"message": "Prefix all unused declarations with '_' where possible"
	},
	"95026": {
		"category": "Message",
		"code": 95026,
		"message": "Fix all detected spelling errors"
	},
	"95027": {
		"category": "Message",
		"code": 95027,
		"message": "Add initializers to all uninitialized properties"
	},
	"95028": {
		"category": "Message",
		"code": 95028,
		"message": "Add definite assignment assertions to all uninitialized properties"
	},
	"95029": {
		"category": "Message",
		"code": 95029,
		"message": "Add undefined type to all uninitialized properties"
	},
	"95030": {
		"category": "Message",
		"code": 95030,
		"message": "Change all jsdoc-style types to TypeScript"
	},
	"95031": {
		"category": "Message",
		"code": 95031,
		"message": "Change all jsdoc-style types to TypeScript (and add '| undefined' to nullable types)"
	},
	"95032": {
		"category": "Message",
		"code": 95032,
		"message": "Implement all unimplemented interfaces"
	},
	"95033": {
		"category": "Message",
		"code": 95033,
		"message": "Install all missing types packages"
	},
	"95034": {
		"category": "Message",
		"code": 95034,
		"message": "Rewrite all as indexed access types"
	},
	"95035": {
		"category": "Message",
		"code": 95035,
		"message": "Convert all to default imports"
	},
	"95036": {
		"category": "Message",
		"code": 95036,
		"message": "Make all 'super()' calls the first statement in their constructor"
	},
	"95037": {
		"category": "Message",
		"code": 95037,
		"message": "Add qualifier to all unresolved variables matching a member name"
	},
	"95038": {
		"category": "Message",
		"code": 95038,
		"message": "Change all extended interfaces to 'implements'"
	},
	"95039": {
		"category": "Message",
		"code": 95039,
		"message": "Add all missing super calls"
	},
	"95040": {
		"category": "Message",
		"code": 95040,
		"message": "Implement all inherited abstract classes"
	},
	"95041": {
		"category": "Message",
		"code": 95041,
		"message": "Add all missing 'async' modifiers"
	},
	"95042": {
		"category": "Message",
		"code": 95042,
		"message": "Add '@ts-ignore' to all error messages"
	},
	"95043": {
		"category": "Message",
		"code": 95043,
		"message": "Annotate everything with types from JSDoc"
	},
	"95044": {
		"category": "Message",
		"code": 95044,
		"message": "Add '()' to all uncalled decorators"
	},
	"95045": {
		"category": "Message",
		"code": 95045,
		"message": "Convert all constructor functions to classes"
	},
	"95046": {
		"category": "Message",
		"code": 95046,
		"message": "Generate 'get' and 'set' accessors"
	},
	"95047": {
		"category": "Message",
		"code": 95047,
		"message": "Convert 'require' to 'import'"
	},
	"95048": {
		"category": "Message",
		"code": 95048,
		"message": "Convert all 'require' to 'import'"
	},
	"95049": {
		"category": "Message",
		"code": 95049,
		"message": "Move to a new file"
	},
	"95050": {
		"category": "Message",
		"code": 95050,
		"message": "Remove unreachable code"
	},
	"95051": {
		"category": "Message",
		"code": 95051,
		"message": "Remove all unreachable code"
	},
	"95052": {
		"category": "Message",
		"code": 95052,
		"message": "Add missing 'typeof'"
	},
	"95053": {
		"category": "Message",
		"code": 95053,
		"message": "Remove unused label"
	},
	"95054": {
		"category": "Message",
		"code": 95054,
		"message": "Remove all unused labels"
	},
	"95055": {
		"category": "Message",
		"code": 95055,
		"message": "Convert '{0}' to mapped object type"
	},
	"95056": {
		"category": "Message",
		"code": 95056,
		"message": "Convert namespace import to named imports"
	},
	"95057": {
		"category": "Message",
		"code": 95057,
		"message": "Convert named imports to namespace import"
	},
	"95058": {
		"category": "Message",
		"code": 95058,
		"message": "Add or remove braces in an arrow function"
	},
	"95059": {
		"category": "Message",
		"code": 95059,
		"message": "Add braces to arrow function"
	},
	"95060": {
		"category": "Message",
		"code": 95060,
		"message": "Remove braces from arrow function"
	},
	"95061": {
		"category": "Message",
		"code": 95061,
		"message": "Convert default export to named export"
	},
	"95062": {
		"category": "Message",
		"code": 95062,
		"message": "Convert named export to default export"
	},
	"95063": {
		"category": "Message",
		"code": 95063,
		"message": "Add missing enum member '{0}'"
	},
	"95064": {
		"category": "Message",
		"code": 95064,
		"message": "Add all missing imports"
	},
	"95065": {
		"category": "Message",
		"code": 95065,
		"message": "Convert to async function"
	},
	"95066": {
		"category": "Message",
		"code": 95066,
		"message": "Convert all to async functions"
	},
	"95069": {
		"category": "Message",
		"code": 95069,
		"message": "Add 'unknown' conversion for non-overlapping types"
	},
	"95070": {
		"category": "Message",
		"code": 95070,
		"message": "Add 'unknown' to all conversions of non-overlapping types"
	},
	"95071": {
		"category": "Message",
		"code": 95071,
		"message": "Add missing 'new' operator to call"
	},
	"95072": {
		"category": "Message",
		"code": 95072,
		"message": "Add missing 'new' operator to all calls"
	},
	"95073": {
		"category": "Message",
		"code": 95073,
		"message": "Add names to all parameters without names"
	},
	"95074": {
		"category": "Message",
		"code": 95074,
		"message": "Enable the 'experimentalDecorators' option in your configuration file"
	},
	"95075": {
		"category": "Message",
		"code": 95075,
		"message": "Convert parameters to destructured object"
	},
	"95076": {
		"category": "Message",
		"code": 95076,
		"message": "Allow accessing UMD globals from modules."
	},
	"95077": {
		"category": "Message",
		"code": 95077,
		"message": "Extract type"
	},
	"95078": {
		"category": "Message",
		"code": 95078,
		"message": "Extract to type alias"
	},
	"95079": {
		"category": "Message",
		"code": 95079,
		"message": "Extract to typedef"
	},
	"95080": {
		"category": "Message",
		"code": 95080,
		"message": "Infer 'this' type of '{0}' from usage"
	},
	"95081": {
		"category": "Message",
		"code": 95081,
		"message": "Add 'const' to unresolved variable"
	},
	"95082": {
		"category": "Message",
		"code": 95082,
		"message": "Add 'const' to all unresolved variables"
	},
	"95083": {
		"category": "Message",
		"code": 95083,
		"message": "Add 'await'"
	},
	"95084": {
		"category": "Message",
		"code": 95084,
		"message": "Add 'await' to initializer for '{0}'"
	},
	"95085": {
		"category": "Message",
		"code": 95085,
		"message": "Fix all expressions possibly missing 'await'"
	},
	"95086": {
		"category": "Message",
		"code": 95086,
		"message": "Remove unnecessary 'await'"
	},
	"95087": {
		"category": "Message",
		"code": 95087,
		"message": "Remove all unnecessary uses of 'await'"
	},
	"95088": {
		"category": "Message",
		"code": 95088,
		"message": "Enable the '--jsx' flag in your configuration file"
	},
	"95089": {
		"category": "Message",
		"code": 95089,
		"message": "Add 'await' to initializers"
	},
	"95090": {
		"category": "Message",
		"code": 95090,
		"message": "Extract to interface"
	},
	"95091": {
		"category": "Message",
		"code": 95091,
		"message": "Convert to a bigint numeric literal"
	},
	"95092": {
		"category": "Message",
		"code": 95092,
		"message": "Convert all to bigint numeric literals"
	},
	"95093": {
		"category": "Message",
		"code": 95093,
		"message": "Convert 'const' to 'let'"
	},
	"95094": {
		"category": "Message",
		"code": 95094,
		"message": "Prefix with 'declare'"
	},
	"95095": {
		"category": "Message",
		"code": 95095,
		"message": "Prefix all incorrect property declarations with 'declare'"
	},
	"95096": {
		"category": "Message",
		"code": 95096,
		"message": "Convert to template string"
	},
	"95097": {
		"category": "Message",
		"code": 95097,
		"message": "Add 'export {}' to make this file into a module"
	},
	"95098": {
		"category": "Message",
		"code": 95098,
		"message": "Set the 'target' option in your configuration file to '{0}'"
	},
	"95099": {
		"category": "Message",
		"code": 95099,
		"message": "Set the 'module' option in your configuration file to '{0}'"
	},
	"95100": {
		"category": "Message",
		"code": 95100,
		"message": "Convert invalid character to its html entity code"
	},
	"95101": {
		"category": "Message",
		"code": 95101,
		"message": "Wrap invalid character in an expression container"
	}
}